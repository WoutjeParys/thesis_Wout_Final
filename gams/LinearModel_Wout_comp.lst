GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 07/24/16 17:01:18 Page 1
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


   3  # GAMS options are $included from the file GAMS.opt
   4  # GOA options are $included from the file GOA.opt
   5  # In order to make them apply globally, the option $ONGLOBAL will first be seet here:
   7   
INCLUDE    C:\Users\Wout\Documents\School\2e master\2e semester\Thesis\Model2 - Usefull Code\run\../gams/GAMS.opt
   9  * File GAMS.opt to the GOA model.
  10   
  11  *This file contains the GAMS options.
  12  *This file is part of the GOA model, version 2.0
  13   
  14  *===============================================================================
  15  * The following are options applying to the GAMS system (unless overwritten).
  16  * Observe that in order to make them apply everywhere,
  17  * the option $ONGLOBAL must be set in the Main.gms file
  18  * before the $inclusion of the present file.
  19  *===============================================================================
  20   
  21   
  22   
  23   
  24   
  25   
  26  *-------------------------------------------------------------------------------
  27  * GAMS output:
  28  *-------------------------------------------------------------------------------
  29   
  30   
  31  *...............................................................................
  32  * $OFFLISTING suppresses printing of input to the list file.
  33  * The listing is convenient for instance if there are errors, because the place
  34  * of the errors will be specified by the line numbers in the list file.
  35  * However, the file produced may be quite large.
  36  * Moreover, you may be more interested in specific parts of the listing,
  37  * therefore refinements are given in the following.
  38   
  39  * If you are primarily interested in the listing of the code,
  40  * you may find it annoying to find a listing of the data files in the list file.
  41  * Therefore the following construction is used to separate listing of code and data.
  42  * For a minimal listing, use:
  43  *   $Setglobal ONOFFDATALISTING  $OFFLISTING
  44  *   $Setglobal ONOFFCODELISTING  $OFFLISTING
  45  * To list code but not data, use:
  46  *   $Setglobal ONOFFDATALISTING  $OFFLISTING
  47  *   $Setglobal ONOFFCODELISTING  $ONLISTING
  48  * To list both code and data, use:
  49  *   $Setglobal ONOFFDATALISTING  $ONLISTING
  50  *   $Setglobal ONOFFCODELISTING  $ONLISTING
  51   
  52   
  56   
  57   
  58  *...............................................................................
  59  * OFFSYMXREF OFFSYMLIST OFFUELLIST OFFUELXREF, with the alternatives
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 07/24/16 17:01:18 Page 2
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


  60  * ONSYMXREF  ONSYMLIST  ONUELLIST  ONUELXREF control the production of maps
  61  * in the list file. Useful for inspection of details and overview:
  63  *$ONSYMXREF ONSYMLIST ONUELLIST ONUELXREF
  64   
  65   
  66  *...............................................................................
  67  * LIMROW and LIMCOL specifies the maximum number of rows and columns
  68  * used in equations listing and inspection of details.
  69  * Defaults are LIMROW=3, LIMCOL=3;
  70  * The statement "LIMROW=0" turns the listing off:
  71   
  72  * OPTIONS LIMROW=   1000, LIMCOL=   1000;
  73  OPTIONS LIMROW=   3, LIMCOL=   3;
  74   
  75   
  76  *...............................................................................
  77  * SYSOUT controls the printing of the solved status in the list file.
  78  * Useful in emergency cases.
  79  * OPTIONS SYSOUT=OFF (default) or OPTIONS SYSOUT=ON:
  80  OPTIONS SYSOUT=Off;
  81   
  82   
  83  *...............................................................................
  84  * SOLPRINT controls the printing of the solution in the list file.
  85  * Useful for inspection of details.
  86  * OPTIONS SOLPRINT=OFF or OPTIONS SOLPRINT=ON (default):
  87  OPTIONS SOLPRINT=Off;
  88   
  89   
  90  *...............................................................................
  91  * $ondollar/$offdollar controls the echoing of dollar control option lines in the listing file:
  92  $ondollar
  93  *-------------------------------------------------------------------------------
  94   
  95   
  96   
  97   
  98   
  99   
 100   
 101   
 102   
 103  *-------------------------------------------------------------------------------
 104  * GAMS input:
 105  *-------------------------------------------------------------------------------
 106   
 107   
 108  *...............................................................................
 109  * ONINLINE makes it possible to comment out parts using /*  */. MUST be present:
 110  $ONINLINE
 111   
 112  *...............................................................................
 113  * Handling of empty sets:
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 07/24/16 17:01:18 Page 3
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 114  * $ONEMPTY/OFFEMPTY permits/forbids definition of empty sets:
 115  $ONEMPTY
 116  *...............................................................................
 117   
 118   
 119   
 120   
 121   
 122   
 123   
 124   
 125   
 126  *-------------------------------------------------------------------------------
 127  * Solver related options:
 128  *-------------------------------------------------------------------------------
 129   
 130  OPTION LP=CPLEX;
 131  OPTION MIP=CPLEX;
 132  OPTION MCP=PATH;
 133  OPTION THREADS = 6;
 134   
 135  * ITERLIM specifies the maximum number of iteration by the solver
 136  OPTIONS ITERLIM=4000000;
 137   
 138  * RESLIM specifies the maximum time (usually seconds) used by the solver
 139  OPTIONS RESLIM=100000;
 140   
 141  * OPTCR controls the precision of the solution. If optcr is greater than 0,
 142  * a good but not necessarily optimal solution will be accepted
 143  option optcr = 0.00
 144   
 145  *...............................................................................
 146  * Set for Cplex solver
 147   
 148  *file cp /cplex.opt/;
 149  *put cp;
 150  *put "lpmethod 4" /;
 151  *put "epint 1e-004" /;
 152  *put "subalg 1" /;
 153  *put "mipstart 1" /;
 154  *put "mipordind 1" /;
 155  *put "heurfreq -1" /;
 156  *put "brdir 1" /;
 157  *put "mipinterval 10" /;
 158  *put "mipdisplay 1" /;
 159  *put "barcrossalg -1" /;
 160  *put "barepcomp 1.0e-4" /;
 161  *put "baritlim 10000" /;
 162  *put "barmaxcor 3"
 163  *put "ppriind 4"
 164  *put "cuts no"/;
 165  *put "predual 1"/;
 166  *put "interactive yes"/;
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 07/24/16 17:01:18 Page 4
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 167  *put "mipemphasis 2"/;
 168  *put "probe 3"/;
 169   
 170  *putclose cp;
 171  *...............................................................................
 172  *-------------------------------------------------------------------------------
INCLUDE    C:\Users\Wout\Documents\School\2e master\2e semester\Thesis\Model2 - Usefull Code\run\../gams/GOA.opt
 173  $include '../gams/GOA.opt';
 174  * File GOA.opt to the GOA model.
 175   
 176  * This file holds options that are used to control model functionality
 177   
 178   
 179   
 180   
 181  *===============================================================================
 182  * Model choices:
 183  *===============================================================================
 184   
 185   
 186   
 187   
 188  *===============================================================================
 189  * Output:
 190  *===============================================================================
 191   
 192   
 193   
 194  *-------------------------------------------------------------------------------
 195  * Some of the actions producing output from the BUI will require establishment of
 196  * absolute paths. The following settings will ensure that if you work from the GAMS IDE
 197  * (with the GAMS Project located in the model folder) then the absolute paths will be established correctly.
 198  * Set relative (to model directory) paths to relevant folders:
 199  * No choices, they must be set as shown. Note the format.
 200  * They are to be used as illustrated below and elsewhere in the code.
 201   
 202  $setglobal  relpathModel            ""
 203  $setglobal  relpathoutput           "..\output\"
 204  $setglobal  relpathInputdata2GDX    "..\output\inputout\"
 205  $setglobal  relpathtemp             "..\output\temp\"
 206   
 207   
 208  #===============================================================================
 209  # INPUT
 210  #===============================================================================
 211   
 212   
 213  #-------------------------------------------------------------------------------
 214  #* Sets
 215  #-------------------------------------------------------------------------------
 216   
 217  # Declaration
 218   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 07/24/16 17:01:18 Page 5
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 219  SETS
 220  RCZ         All geographical entities (R_ALL + C_ALL + Z_ALL)
 221  R_ALL(RCZ)  All regions (i.e. W-EU & E-EU & North and Baltic Sea)
 222  C_ALL(RCZ)  All countries
 223  Z_ALL(RCZ)  All zones within a country
 224  R_C(R_ALL,C_ALL)        Countries in regions
 225  C_Z(C_ALL,Z_ALL)        Zones in countries
 226  #R(R_ALL)   Regions in the simulation
 227  C(C_ALL)    Countries in the simulation
 228  Z(Z_ALL)    Zones in the simulation
 229   
 230  Y_ALL       All years
 231  Y(Y_ALL)    Years in the simulation
 232  P           Time periods
 233  T           Time steps within periods
 234   
 235  G           All generation technologies
 236  GD(G)       Dispatchable generation technologies
 237  GC(G)       Conventional generation technologies
 238  GCG(GC)     Gas-fueled conventional generation technologies
 239  GCO(GC)     Other conventional generation technologies
 240  GR(G)       Renewable generation technologies
 241  GRI(GR)     Intermittent renewable generation technologies
 242  GRD(GR)     Dispatchable renewable generation technologies
 243  G_PARAM     Generation technology parameters
 244   
 245  S           All storage technologies
 246  SSM(S)      Short and Mid-term storage technologies
 247  SML(S)      Mid and Long-term storage technologies
 248  SS(S)       Short-term storage technologies
 249  SM(S)       Mid-term storage technologies
 250  SL(S)       Long-term storage technologies
 251  S_PARAM     Storage technology parameterz
 252   
 253  POL         Policy instruments
 254   
 255  R           Reserve requirements
 256  RU(R)       Upward reserve requirements
 257  RD(R)       Downward reserve requirements
 258  RUF(RU)     FCR upward reserve requirements
 259  RUA(RU)     FCR and aFRR upward reserve requirements
 260  RDA(RD)     aFRR downward reserve requirements
 261   
 262  H           All possible hours
 263  ;
 264   
GDXIN   C:\Users\Wout\Documents\School\2e master\2e semester\Thesis\Model2 - Usefull Code\run\_gams_py_gdb0.gdx
 265  $GDXIN _gams_py_gdb0
--- LOAD  RCZ = 1:RCZ
--- LOAD  R_ALL = 2:R_ALL
--- LOAD  C_ALL = 3:C_ALL
--- LOAD  Z_ALL = 4:Z_ALL
--- LOAD  R_C = 5:R_C
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 07/24/16 17:01:18 Page 6
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


--- LOAD  C_Z = 6:C_Z
--- LOAD  C = 7:C
--- LOAD  Z = 8:Z
 266  $LOAD RCZ R_ALL C_ALL Z_ALL R_C C_Z C Z
--- LOAD  Y_ALL = 9:Y_ALL
--- LOAD  Y = 10:Y
 267  $LOAD Y_ALL Y
--- LOAD  P = 11:P
--- LOAD  T = 12:T
 268  $LOAD P T
--- LOAD  G = 14:G
--- LOAD  GD = 15:GD
--- LOAD  GC = 16:GC
--- LOAD  GCG = 17:GCG
--- LOAD  GCO = 18:GCO
--- LOAD  GR = 19:GR
--- LOAD  GRI = 20:GRI
--- LOAD  GRD = 21:GRD
--- LOAD  G_PARAM = 22:G_PARAM
 269  $LOAD G GD GC GCG GCO GR GRI GRD G_PARAM
--- LOAD  S = 23:S
--- LOAD  SSM = 24:SSM
--- LOAD  SML = 25:SML
--- LOAD  SS = 26:SS
--- LOAD  SM = 27:SM
--- LOAD  SL = 28:SL
--- LOAD  S_PARAM = 29:S_PARAM
 270  $LOAD S SSM SML SS SM SL S_PARAM
--- LOAD  POL = 30:POL
 271  $LOAD POL
--- LOAD  R = 31:R
--- LOAD  RU = 32:RU
--- LOAD  RD = 33:RD
--- LOAD  RUF = 35:RUF
--- LOAD  RUA = 34:RUA
--- LOAD  RDA = 36:RDA
 272  $LOAD R RU RD RUF RUA RDA
--- LOAD  H = 13:H
 273  $LOAD H
 274   
 275  alias(T,T_MUT,T_MDT,T_E);
 276  SSM(S) = SS(S) + SM(S);
 277   
 278  SETS
 279  MUT(G,T_MUT)    Minimum up time per technology
 280  MDT(G,T_MDT)    Minimum down time per technology
 281  ;
 282   
--- LOAD  MUT = 37:MUT
 283  $LOAD MUT
--- LOAD  MDT = 38:MDT
 284  $LOAD MDT
 285   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 07/24/16 17:01:18 Page 7
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 286  PARAMETERS
 287  G_DATA(G,G_PARAM)      Technologies characteristics
 288  S_DATA(S,S_PARAM)      Technologies characteristics
 289   
 290  RG(R,GD)               Ramping ability per reserve category for generation technologies
 291  RSC(R,SML)             Ramping ability per reserve category for storage technologies while charging
 292  RSD(R,SM)              Ramping ability per reserve category for storage technologies while discharging
 293   
 294  C_GAS                  Cost of imported gas
 295   
 296  DEM(Y_ALL,Z_ALL)       Energy demand per year [MWh]
 297  DEM_T(P,T,Z_ALL)       Relative electricity demand per hour [percentage]
 298   
 299  RES_T(P,T,Z_ALL,GRI)   Intermittent generation profilez [MW]
 300  REL_T(P,T,Z_ALL,GRI)   Reliable intermittent generation profilez [MW]
 301   
 302  W(P)                   Weight of period P
 303   
 304  POL_TARGETS(POL,Y_ALL) Policy targets such as the desired share of renewables in production [%]
 305   
 306  #CAP_G(Y,Z,G,C_PARAM)  Installed capacities per zone per year [MW]
 307   
 308  R_EXO(C_ALL,R)         Exogenous reserve requirements per country
 309  R_ENDO(C_ALL,GRI,R)    Endogenous reserve requirements per country per (renewable) generation technology
 310   
 311  T_MARKET               Time step of the market
 312  T_R(R)                 Time factor to calculate energy for reserve provision
 313   
 314  EGCAPEX                Annualized energy investment cost of gas storage
 315  E_LP                   Energy volume of the gas line pack
 316   
 317  ELAST(P,T,H)           Elasticity relative to hour one and hour two
 318   
 319  DIAG(T,H)              a matrix to include the controlled hour
 320  TRI_UP(T,H)            a matrix to include the eleven earlier hours
 321  TRI_LOW(T,H)           a matrix to include the twelve later hours
 322   
 323  P_REF                  reference price (calculated in advance)
 324  TOTDEM                 The sum of the demand over all hours
 325  LIMITPRICE             relative value of price difference that is allowed
 326  LIMITDEM               absolute value of max demand shift
 327  SHIFTMIN(H,T)          matrix to constraint shifting of energy inner window
 328  SHIFTMAX(H,T)          matrix to constraint shifting of energy outer window
 329  LENGTH_P               the length of the period as programmed in main and init (.py)
 330   
 331  ELAST_NEW(P,T,H)       the new calculated elasticity matrix, taking into account the compensation factor
 332  DEM_REF_RES(P,T,Z)     amount of reference residential demand before DR
 333  DEM_NON_RES(P,T,Z)     amount of non residential demand
 334  ELAST_COMP(P,T,H)      compensation PEM
 335  RATIO_H(P,H)           inbalance ratio
 336  LINEARPEM(T,H)         compensation PEM linear
 337  OWNELASTPEM(P,T)       compensation PEM own-elast
 338   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 07/24/16 17:01:18 Page 8
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 339  # data from DR model
 340  DEM_RES_MAX(P,T,Z)     max residential demand
 341  DEM_RES_MIN(P,T,Z)     min residential demand
 342  DEM_OPTIMAL(P,T,Z)     anchor point demand
 343  PRICE_REF(P,H,Z)       anchor point price
 344  DEM_RES_FP(P,T,Z)      prospected demand under flat price
 345   
 346  # factor of reserve allocation flexible damand
 347  FACTOR_RES_DR         factor that determines which part of the flexible band is used for system reserves
 348   
 349  DR_CAP_PRICE          a fictive price for mobilised DR capacity
 350  DR_EN_PRICE           a fictive price for mobilised DR energy
 351  ;
 352   
--- LOAD  G_DATA = 39:G_DATA
 353  $LOAD G_DATA
--- LOAD  S_DATA = 40:S_DATA
 354  $LOAD S_DATA
--- LOAD  RG = 41:RG
 355  $LOAD RG
--- LOAD  RSC = 42:RSC
 356  $LOAD RSC
--- LOAD  RSD = 43:RSD
 357  $LOAD RSD
--- LOAD  DEM = 44:DEM
--- LOAD  DEM_T = 45:DEM_T
 358  $LOAD DEM DEM_T
--- LOAD  RES_T = 46:RES_T
 359  $LOAD RES_T
--- LOAD  REL_T = 47:REL_T
 360  $LOAD REL_T
--- LOAD  W = 48:W
 361  $LOAD W
--- LOAD  POL_TARGETS = 49:POL_TARGETS
 362  $LOAD POL_TARGETS
 363  #$LOAD CAP_G
--- LOAD  R_EXO = 50:R_EXO
 364  $LOAD R_EXO
--- LOAD  R_ENDO = 51:R_ENDO
 365  $LOAD R_ENDO
--- LOAD  T_R = 52:T_R
 366  $LOAD T_R
--- LOAD  ELAST = 53:ELAST
 367  $LOAD ELAST
--- LOAD  DIAG = 54:DIAG
 368  $LOAD DIAG
--- LOAD  TRI_UP = 55:TRI_UP
--- LOAD  TRI_LOW = 56:TRI_LOW
 369  $LOAD TRI_UP TRI_LOW
--- LOAD  SHIFTMIN = 57:SHIFTMIN
 370  $LOAD SHIFTMIN
--- LOAD  SHIFTMAX = 58:SHIFTMAX
 371  $LOAD SHIFTMAX
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                 07/24/16 17:01:18 Page 9
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


--- LOAD  DEM_REF_RES = 60:DEM_REF_RES
--- LOAD  DEM_NON_RES = 59:DEM_NON_RES
 372  $LOAD DEM_REF_RES DEM_NON_RES
--- LOAD  LINEARPEM = 61:LINEARPEM
 373  $LOAD LINEARPEM
--- LOAD  DEM_OPTIMAL = 64:DEM_OPTIMAL
--- LOAD  DEM_RES_MIN = 63:DEM_RES_MIN
--- LOAD  DEM_RES_MAX = 62:DEM_RES_MAX
--- LOAD  DEM_RES_FP = 66:DEM_RES_FP
--- LOAD  PRICE_REF = 65:PRICE_REF
 374  $LOAD DEM_OPTIMAL DEM_RES_MIN DEM_RES_MAX DEM_RES_FP PRICE_REF
 375   
 376   
 377  #C_GAS = 25.6643460843943;
 378  C_GAS = 25.6643460843943*2;
 379  T_MARKET = 1;
 380  EGCAPEX = 2000000000000000000000000;
 381  E_LP = 7100000;
 382  P_REF = 55.5;
 383  TOTDEM = sum((P,T,Z),DEM_T(P,T,Z));
 384  LIMITPRICE = 1.5;
 385  LIMITDEM = 1500;
 386  LENGTH_P = card(T);
 387  FACTOR_RES_DR = 0;
 388   
 389  DR_CAP_PRICE = 0;
 390  DR_EN_PRICE = 0;
 391   
 392  ############################
 393  ## CHOOSE STARTING DEMAND CURVE (Do not use!!!!!!!!)
 394  ###############
 395  #PRICE_REF(P,H,Z) = P_REF;
 396  #DEM_OPTIMAL(P,T,Z) = DEM_RES_FP(P,T,Z);
 397   
 398   
 399  ## flat compensation PEM
 400  #RATIO_H(P,H) = (-sum((T,Z),DIAG(T,H)*ELAST(P,T,H)*DEM_OPTIMAL(P,T,Z))-sum((T,Z),(TRI_UP(T,H)+TRI_LOW(T,H))*ELAST(P,T,H)*DEM_OPTIMAL(P,T,Z))) /
 401  #                (sum((T,Z),(TRI_LOW(T,H)+TRI_UP(T,H))*DEM_OPTIMAL(P,T,Z)));
 402  #ELAST_COMP(P,T,H) = (TRI_LOW(T,H)+TRI_UP(T,H))*RATIO_H(P,H);
 403  ## linear compensation PEM
 404  #ELAST_COMP(P,T,H) = (LINEARPEM(T,H))*RATIO_H(P,H);
 405  ## Elastic compensation PEM
 406  OWNELASTPEM(P,T) = -sum(H,DIAG(T,H)*ELAST(P,T,H));
 407  RATIO_H(P,H) = (-sum((T,Z),DIAG(T,H)*ELAST(P,T,H)*DEM_OPTIMAL(P,T,Z))-sum((T,Z),(TRI_UP(T,H)+TRI_LOW(T,H))*ELAST(P,T,H)*DEM_OPTIMAL(P,T,Z))) /
 408                  (sum((T,Z),(TRI_LOW(T,H)+TRI_UP(T,H))*OWNELASTPEM(P,T)*DEM_OPTIMAL(P,T,Z)));
 409  ELAST_COMP(P,T,H) = (TRI_LOW(T,H)+TRI_UP(T,H))*OWNELASTPEM(P,T)*RATIO_H(P,H);
 410  ## Moving frames compensation PEM = 0
 411  #ELAST_COMP(P,T,H) = 0;
 412  ELAST_NEW(P,T,H) = ELAST(P,T,H)+ELAST_COMP(P,T,H);
 413   
 414   
 415  VARIABLES
 416  obj                     Value of objective function
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                07/24/16 17:01:18 Page 10
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 417   
 418  #######################################################
 419   
 420  price_unit(P,H,Z)                               Residential price signal for the electricity
 421  price_unit_clone(P,T,Z)
 422   
 423  #shiftforwards(P,H,Z)        Shift towards an earlier moment in time per hour
 424  #shiftforwards_total(P,Z)    Shift towards an earlier moment in time per period
 425  #shiftbackwards(P,H,Z)       Shift towards a later moment in time per hour
 426  #shiftbackwards_total(P,Z)   Shift towards a later moment in time per period
 427  #shiftaway(P,H,Z)            Shift away from an hour
 428  #shiftaway_total(P,Z)        Shift away from a period
 429  #
 430  #shiftfi(P,H,Z)
 431  #shiftbi(P,H,Z)
 432  #shifta(P,H,Z)
 433  #shiftfc(P,H,Z)
 434  #shiftbc(P,H,Z)
 435  #
 436  #front_up(P,H,Z)
 437  #front_down(P,H,Z)
 438  #back_up(P,H,Z)
 439  #back_down(P,H,Z)
 440  #shift_up(P,H,Z)
 441  #shift_down(P,H,Z)
 442   
 443  genDR(P,T,Z)
 444  capDR(Z)
 445  costgDR(Z)
 446  costcDR(Z)
 447  ;
 448   
 449  POSITIVE VARIABLES
 450  #######################################################
 451   
 452  demand_new_res(P,T,Z)       Residential demand after price signal applied
 453  demand_new_res_clone(P,H,Z)
 454  demand_unit(P,T,Z)          demand of the electricity (sum residential & non-residential)
 455  demand_unit_clone(P,H,Z)
 456  demand_tot(P,Z)             total demand, based on demand_unit
 457  demand_ref(P,T,Z)           the reference demand with flat price
 458   
 459  #######################################################
 460   
 461  cap(Y,Z,G)                  Generation capacity per year, per zone and per generation technology [MW]
 462  e_cap(Y,Z,S)                Energy capacity of storage technology S
 463  p_cap_c(Y,Z,S)              Charging power capacity of storage technology S
 464  p_cap_d(Y,Z,SM)             Discharging power capacity of storage technology SM
 465  eg_cap                      Gas storage capacity
 466   
 467  gen(Y,P,T,Z,G)              Electricity generation per time step, per zone and per generation technology [MWh]
 468  curt(Y,P,T,Z,GRI)           Curtailment of renewable output
 469   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                07/24/16 17:01:18 Page 11
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 470  e(Y,P,Z,S)                  Energy content of storage technology S at period P
 471  e_f(Y,P,T,Z,S)              Energy content of storage technology S at time T during the first cycle of period P
 472  e_l(Y,P,T,Z,S)              Energy content of storage technology S at time T during the last cycle of period P
 473  p_c(Y,P,T,Z,S)              Electricity generation per time step, per zone and per generation technology [MWh]
 474  p_d(Y,P,T,Z,S)              Electricity generation per time step, per zone and per generation technology [MWh]
 475  eg(Y,P,C)                   Energy content of gas storage at period P
 476  eg_f(Y,P,T,C)               Energy content of gas storage at time T during the first cycle of period P
 477  eg_l(Y,P,T,C)               Energy content of gas storage at time T during the last cycle of period P
 478  pg_c(Y,P,T,C)               Charging of gas storage
 479  pg_d(Y,P,T,C)               Discharging of gas storage
 480   
 481  res_g(Y,P,T,Z,R,G)          Reserve allocation of generation technology GD for reserve category R
 482  res_s(Y,P,T,Z,R,S)          Reserve allocation of storage technology S for reserve category R
 483  res_DR(Y,P,T,Z,R)           Reserve allocation of demand response for reserve category R
 484   
 485  load_shedding(Y,P,T,Z)      Load shedding
 486  q_endo(Y,P,T,C,R,GRI)       Endogenous reserve requirements for category R
 487  co2(Y,C,G)                  CO2-emissions per year, per zone and per generation technology [kg]
 488  lcg(Y,C,G)                  Life cycle greenhouse gas emissions per year, per zone and per generation technology [kg]
 489   
 490  res_g_s(Y,P,T,Z,R,GD)       Spinning reserve allocation of generation technology GD for reserve category R
 491  res_g_ns(Y,P,T,Z,RU,GD)     Start-up reserve allocation of generation technology GD for reserve category RU
 492  res_g_sd(Y,P,T,Z,RD,GD)     Shut-down reserve allocation of generation technology GD for reserve category RD
 493   
 494  n(Y,P,T,Z,GD)               Number of units of each generation technology per year, time step and zone [-]
 495  n_su(Y,P,T,Z,GD)            Number of units starting up of each generation technology
 496  n_sd(Y,P,T,Z,GD)            Number of units shutting down of each generation technology
 497  n_su_r(Y,P,T,Z,RU,GD)       Number of units starting up of each generation technology
 498  n_sd_r(Y,P,T,Z,RD,GD)       Number of units shutting down of each generation technology
 499   
 500  ramp_up(Y,P,T,Z,GD)         Increase in output by ramping up
 501  ramp_dn(Y,P,T,Z,GD)         Decrease in output by ramping down
 502  ramp_su(Y,P,T,Z,GD)         Increase in output by starting up additional units
 503  ramp_sd(Y,P,T,Z,GD)         Decrease in output by shutting down units
 504   
 505  curt_dummy(Y,P,T,Z,GRI)     Dummy variable in case RES objective cannot be reached
 506   
 507  cyc_cost(Y,Z,SS)            cycling cost of short-term storage
 508   
 509  res_s_c(Y,P,T,Z,R,S)        Reserve allocation of charging storage technology S for reserve category R
 510  res_s_c_s(Y,P,T,Z,R,SML)    Spinning reserve allocation of charging storage technology SML for reserve category R
 511  res_s_c_ns(Y,P,T,Z,RD,SML)  Start-up reserve allocation of charging storage technology SML for reserve category RD
 512  res_s_c_sd(Y,P,T,Z,RU,SML)  Shut-down reserve allocation of charging storage technology SML for reserve category RU
 513  res_s_d(Y,P,T,Z,R,S)        Reserve allocation of discharging storage technology S for reserve category R
 514  res_s_d_s(Y,P,T,Z,R,SM)     Spinning reserve allocation of discharging storage technology SM for reserve category R
 515  res_s_d_ns(Y,P,T,Z,RU,SM)   Start-up reserve allocation of discharging storage technology SM for reserve category RU
 516  res_s_d_sd(Y,P,T,Z,RD,SM)   Shut-down reserve allocation of discharging storage technology SM for reserve category RD
 517   
 518  n_c(Y,P,T,Z,SML)            Number of units of each generation technology per year, time step and zone [-]
 519  n_c_su(Y,P,T,Z,SML)         Number of units starting up of each generation technology
 520  n_c_sd(Y,P,T,Z,SML)         Number of units shutting down of each generation technology
 521  n_c_su_r(Y,P,T,Z,RD,SML)    Number of units starting up of each generation technology
 522  n_c_sd_r(Y,P,T,Z,RU,SML)    Number of units shutting down of each generation technology
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                07/24/16 17:01:18 Page 12
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 523   
 524  ramp_c_up(Y,P,T,Z,S)        Increase in output by ramping up
 525  ramp_c_dn(Y,P,T,Z,S)        Decrease in output by ramping down
 526  ramp_c_su(Y,P,T,Z,SML)      Increase in output by starting up additional units
 527  ramp_c_sd(Y,P,T,Z,SML)      Decrease in output by shutting down units
 528   
 529  n_d(Y,P,T,Z,SM)             Number of units of each generation technology per year, time step and zone [-]
 530  n_d_su(Y,P,T,Z,SM)          Number of units starting up of each generation technology
 531  n_d_sd(Y,P,T,Z,SM)          Number of units shutting down of each generation technology
 532  n_d_su_r(Y,P,T,Z,RU,SM)     Number of units starting up of each generation technology
 533  n_d_sd_r(Y,P,T,Z,RD,SM)     Number of units shutting down of each generation technology
 534   
 535  ramp_d_up(Y,P,T,Z,S)        Increase in output by ramping up
 536  ramp_d_dn(Y,P,T,Z,S)        Decrease in output by ramping down
 537  ramp_d_su(Y,P,T,Z,SM)       Increase in output by starting up additional units
 538  ramp_d_sd(Y,P,T,Z,SM)       Decrease in output by shutting down units
 539   
 540  pg_import(Y,P,T,C)          Import of gas
 541  pg_syn(Y,P,T,Z,GCG)         Use of synthetic gas in gas-fueled conventional generation technologies GCG
 542  pg_fos(Y,P,T,Z,GCG)         Use of natural gas in gas-fueled conventional generation technologies GCG
 543   
 544  ;
 545   
 546  EQUATIONS
 547  #--Objective function--#
 548  qobj
 549   
 550  #--System constraints--#
 551  qbalance(Y,P,T,Z)
 552  qresprod(Y,C)
 553  qco2lim(Y,C)
 554  qresendomin(Y,P,T,C,R,GRI)
 555  qresendomax(Y,P,T,C,R,GRI)
 556  qres(Y,P,T,C,R)
 557  qgendisp(Y,P,T,C)
 558  qgendisppeak(Y,C)
 559  qco2(Y,C,G)
 560  qlcg(Y,C,G)
 561   
 562  #--Generation technologies--#
 563  qpotcapmin(Y,C,G)
 564  #qpotcapmax(Y,C,G)
 565  #qpotgenmin(Y,C,G)
 566  #qpotgenmax(Y,C,G)
 567   
 568  qresgcu(Y,P,T,Z,RU,GD)
 569  qresgcd(Y,P,T,Z,RD,GD)
 570  qn(Y,P,T,Z,GD)
 571  qnmax(Y,P,T,Z,GD)
 572  qnsu(Y,P,T,Z,GD)
 573  qnsd(Y,P,T,Z,GD)
 574  qgen(Y,P,T,Z,GD)
 575  qgenmin(Y,P,T,Z,GD)
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                07/24/16 17:01:18 Page 13
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 576  qgenmax(Y,P,T,Z,GD)
 577  qrudyn(Y,P,T,Z,GD)
 578  qrucap(Y,P,T,Z,GD)
 579  qrddyn(Y,P,T,Z,GD)
 580  qrdcap(Y,P,T,Z,GD)
 581  qsumin(Y,P,T,Z,GD)
 582  qsumax(Y,P,T,Z,GD)
 583  qsdmin(Y,P,T,Z,GD)
 584  qsdmax(Y,P,T,Z,GD)
 585  qrufu(Y,P,T,Z,GD)
 586  qruau(Y,P,T,Z,GD)
 587  qrumus(Y,P,T,Z,GD)
 588  qrdad(Y,P,T,Z,GD)
 589  qrdmd(Y,P,T,Z,GD)
 590  qrunsmin(Y,P,T,Z,RU,GD)
 591  qrunsmax(Y,P,T,Z,RU,GD)
 592  qrdsdmin(Y,P,T,Z,RD,GD)
 593  qrdsdmax(Y,P,T,Z,RD,GD)
 594   
 595  qresgru(Y,P,T,Z,RU,GRI)
 596  qgenr(Y,P,T,Z,GRI)
 597  qresgrdr(Y,P,T,Z,GRI)
 598  qresgrdg(Y,P,T,Z,GRI)
 599   
 600  #--Storage technologies--#
 601  qress(Y,P,T,Z,R,S)
 602  qspotcapmin(Y,C,S)
 603  qspotcapmax(Y,C,S)
 604   
 605  qe(Y,P,Z,S)
 606  qemax(Y,P,Z,S)
 607  qef(Y,P,T,Z,S)
 608  qefmin(Y,P,T,Z,S)
 609  qefmax(Y,P,T,Z,S)
 610  qefstart(Y,P,T,Z,S)
 611  qel(Y,P,T,Z,S)
 612  qelmin(Y,P,T,Z,S)
 613  qelmax(Y,P,T,Z,S)
 614  qelstart(Y,P,T,Z,S)
 615  qdurmin(Y,Z,S)
 616  qdurmax(Y,Z,S)
 617   
 618  qsscemin(Y,Z,SS)
 619  qssccmin(Y,Z,SS)
 620  qsscdmax(Y,P,T,Z,SS)
 621  qssc(Y,P,T,Z,SS)
 622  qsscru(Y,P,T,Z,SS)
 623  qsscrd(Y,P,T,Z,SS)
 624  qssd(Y,P,T,Z,SS)
 625  qssdru(Y,P,T,Z,SS)
 626  qssdrd(Y,P,T,Z,SS)
 627   
 628  qresscu(Y,P,T,Z,RU,SML)
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                07/24/16 17:01:18 Page 14
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 629  qresscd(Y,P,T,Z,RD,SML)
 630  qressdu(Y,P,T,Z,RU,SM)
 631  qressdd(Y,P,T,Z,RD,SM)
 632  qnc(Y,P,T,Z,SML)
 633  qncmax(Y,P,T,Z,SML)
 634  qncsu(Y,P,T,Z,SML)
 635  qncsd(Y,P,T,Z,SML)
 636  qsmlc(Y,P,T,Z,SML)
 637  qsmlcmin(Y,P,T,Z,SML)
 638  qsmlcmax(Y,P,T,Z,SML)
 639  qcrudyn(Y,P,T,Z,SML)
 640  qcrucap(Y,P,T,Z,SML)
 641  qcrddyn(Y,P,T,Z,SML)
 642  qcrdcap(Y,P,T,Z,SML)
 643  qcsumin(Y,P,T,Z,SML)
 644  qcsumax(Y,P,T,Z,SML)
 645  qcsdmin(Y,P,T,Z,SML)
 646  qcsdmax(Y,P,T,Z,SML)
 647  qcruad(Y,P,T,Z,SML)
 648  qcrumd(Y,P,T,Z,SML)
 649  qcrdfu(Y,P,T,Z,SML)
 650  qcrdau(Y,P,T,Z,SML)
 651  qcrdmus(Y,P,T,Z,SML)
 652  qcrunsmin(Y,P,T,Z,RD,SML)
 653  qcrunsmax(Y,P,T,Z,RD,SML)
 654  qcrdsdmin(Y,P,T,Z,RU,SML)
 655  qcrdsdmax(Y,P,T,Z,RU,SML)
 656   
 657  qcapdeqcapc(Y,Z,SM)
 658  qnd(Y,P,T,Z,SM)
 659  qndmax(Y,P,T,Z,SM)
 660  qndsu(Y,P,T,Z,SM)
 661  qndsd(Y,P,T,Z,SM)
 662  qsmd(Y,P,T,Z,SM)
 663  qsmdmin(Y,P,T,Z,SM)
 664  qsmdmax(Y,P,T,Z,SM)
 665  qdrudyn(Y,P,T,Z,SM)
 666  qdrucap(Y,P,T,Z,SM)
 667  qdrddyn(Y,P,T,Z,SM)
 668  qdrdcap(Y,P,T,Z,SM)
 669  qdsumin(Y,P,T,Z,SM)
 670  qdsumax(Y,P,T,Z,SM)
 671  qdsdmin(Y,P,T,Z,SM)
 672  qdsdmax(Y,P,T,Z,SM)
 673  qdrufu(Y,P,T,Z,SM)
 674  qdruau(Y,P,T,Z,SM)
 675  qdrumus(Y,P,T,Z,SM)
 676  qdrdad(Y,P,T,Z,SM)
 677  qdrdmd(Y,P,T,Z,SM)
 678  qdrunsmin(Y,P,T,Z,RU,SM)
 679  qdrunsmax(Y,P,T,Z,RU,SM)
 680  qdrdsdmin(Y,P,T,Z,RD,SM)
 681  qdrdsdmax(Y,P,T,Z,RD,SM)
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                07/24/16 17:01:18 Page 15
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 682   
 683  qslressd(Y,P,T,Z,R,SL)
 684  qgase(Y,P,C)
 685  qgasemax(Y,P,C)
 686  qgasef(Y,P,T,C)
 687  qgasefmax(Y,P,T,C)
 688  qgasefstart(Y,P,T,C)
 689  qgasel(Y,P,T,C)
 690  qgaselmax(Y,P,T,C)
 691  qgaselstart(Y,P,T,C)
 692  qgasc(Y,P,T,C)
 693  qgasd(Y,P,T,C)
 694  qgasuse(Y,C)
 695  qgasusegen(Y,P,T,Z,GCG)
 696   
 697  ###############################
 698  price_clone(P,T,Z)
 699  demand(P,T,Z)
 700  demand_clone(P,H,Z)
 701   
 702  #data DR model
 703  demand_max(P,T,Z)
 704  demand_min(P,T,Z)
 705   
 706  # reserve allocation
 707  qresdrup(Y,P,T,Z)
 708  qresdrdo(Y,P,T,Z)
 709   
 710  # cost of DR
 711  gdr(P,T,Z)
 712  gdr2(P,T,Z)
 713  cdr(P,T,Z)
 714  cgdr(Z)
 715  ccdr(Z)
 716   
 717  sum_demand(P,T,Z)
 718  totdemandmf(P,Z)
 719  totdemand(P,Z)
 720  refdemand(P,T,Z)
 721  priceconstraint1(P,H,Z)
 722  priceconstraint2(P,H,Z)
 723  shiftconstraint_frame_1(P,H,Z)
 724  shiftconstraint_frame_2(P,H,Z)
 725   
 726  #shiftedforward(P,H,Z)
 727  #shiftedforwardtotal(P,Z)
 728  #shiftedbackward(P,H,Z)
 729  #shiftedbackwardtotal(P,Z)
 730  #shiftedaway(P,H,Z)
 731  #shiftedawaytotal(P,Z)
 732  #
 733  #shiftedfi(P,H,Z)
 734  #shiftedbi(P,H,Z)
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                07/24/16 17:01:18 Page 16
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 735  #shiftedfc(P,H,Z)
 736  #shiftedbc(P,H,Z)
 737  #
 738  #front_d_1(P,H,Z)
 739  #front_d_2(P,H,Z)
 740  #front_u_1(P,H,Z)
 741  #front_u_2(P,H,Z)
 742  #
 743  #back_d_1(P,H,Z)
 744  #back_d_2(P,H,Z)
 745  #back_u_1(P,H,Z)
 746  #back_u_2(P,H,Z)
 747  #
 748  #shift_d_1(P,H,Z)
 749  #shift_d_2(P,H,Z)
 750  #shift_u_1(P,H,Z)
 751  #shift_u_2(P,H,Z)
 752  #
 753  #demlimitunder(P,T,Z)
 754  #demlimitupper(P,T,Z)
 755  ;
 756   
 757  #-----######################---------------------------------------------------#
 758  #-----# Objective function #---------------------------------------------------#
 759  #-----######################---------------------------------------------------#
 760  qobj..         obj
 761                  =e=
 762                      sum((Y,Z,G),            (G_DATA(G,'C_INV') + G_DATA(G,'C_FOM'))*1000*cap(Y,Z,G))
 763                      + sum((Y,Z,SS),         (S_DATA(SS,'C_E_INV')*1000*e_cap(Y,Z,SS)))
 764                      + sum((Y,Z,SS),         (cyc_cost(Y,Z,SS)))
 765                      + sum((Y,Z,SM),         (S_DATA(SM,'C_E_INV')*1000)*e_cap(Y,Z,SM))
 766                      + sum((Y,Z,S),          (S_DATA(S,'C_P_C_INV')*1000)*p_cap_c(Y,Z,S))
 767                      + sum((Y,Z,SM),         (S_DATA(SM,'C_P_D_INV')*1000)*p_cap_d(Y,Z,SM))
 768                      + sum(Z,                DR_CAP_PRICE*1000*capDR(Z))
 769                      +
 770                      (sum((Y,P,T,Z,G),       W(P)*(G_DATA(G,'C_VOM'))*gen(Y,P,T,Z,G))
 771                      + sum((Y,P,T,Z,GC),     W(P)*(G_DATA(GC,'C_FUEL'))*gen(Y,P,T,Z,GC))
 772                      + sum((Y,P,T,Z,GRI),    W(P)*(0)*curt(Y,P,T,Z,GRI) + W(P)*(1000000)*curt_dummy(Y,P,T,Z,GRI))
 773                      + sum((Y,P,T,Z),        W(P)*(10000)*load_shedding(Y,P,T,Z))
 774                      + sum((P,T,Z),          W(P)*genDR(P,T,Z)*DR_EN_PRICE)
 775                      )
 776                      *(168/card(T));
 777                      ;
 778   
 779   
 780  #-----######################---------------------------------------------------#
 781  #-----# System constraints #---------------------------------------------------#
 782  #-----######################---------------------------------------------------#
 783   
 784  #--System balance--#
 785   
 786  # balance with demand response
 787  qbalance(Y,P,T,Z)..
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                07/24/16 17:01:18 Page 17
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 788                      sum(G, gen(Y,P,T,Z,G))
 789                      + sum(SSM, p_d(Y,P,T,Z,SSM))
 790                              =e=
 791                                      demand_unit(P,T,Z)
 792                                      - load_shedding(Y,P,T,Z)
 793                                      + sum(S, p_c(Y,P,T,Z,S))
 794                                      ;
 795   
 796  #--Renewable target--#
 797   
 798  #qresprod(Y,C)..
 799  #                   sum(Z $ C_Z(C,Z),       sum((GCO,P,T), W(P)*gen(Y,P,T,Z,GCO)))
 800  #                   + sum(Z $ C_Z(C,Z), sum((GCG,P,T), W(P)*pg_fos(Y,P,T,Z,GCG)*(G_DATA(GCG,'EFF')/100)))
 801  #                   =l=
 802  #                           (100 - POL_TARGETS('RES_SHARE', Y))/100 * sum(Z $ C_Z(C,Z), sum((P,T), W(P)*demand_unit(P,T,Z)))
 803  #                           ;
 804   
 805  qresprod(Y,C)..
 806                      sum(Z $ C_Z(C,Z), sum((GR,P,T), W(P)*gen(Y,P,T,Z,GR)))
 807                      =g=
 808                              POL_TARGETS('RES_SHARE', Y)/100 * sum(Z $ C_Z(C,Z), sum((P,T), W(P)*demand_unit(P,T,Z)))
 809                              ;
 810   
 811  qco2lim(Y,C)..
 812  #                                       sum(Z $ C_Z(C,Z), sum((GCO,P,T), W(P)*gen(Y,P,T,Z,GCO)*G_DATA(GCO,'CO2')))
 813  #                                       + sum(Z $ C_Z(C,Z), sum((GCG,P,T), W(P)*pg_fos(Y,P,T,Z,GCG)*(G_DATA(GCG,'EFF')/100)*G_DATA(GCG,'CO2')))
 814                      sum(Z $ C_Z(C,Z), sum((GC,P,T), W(P)*gen(Y,P,T,Z,GC)*G_DATA(GC,'CO2')))
 815                      =l=
 816                              50000000*0.4
 817                              ;
 818   
 819  #--Reserve requirements--#
 820   
 821  qresendomin(Y,P,T,C,R,GRI)..
 822                      q_endo(Y,P,T,C,R,GRI)
 823                      =g=
 824                              R_ENDO(C,GRI,R)*sum(Z $ C_Z(C,Z), (RES_T(P,T,Z,GRI)-REL_T(P,T,Z,GRI))*cap(Y,Z,GRI)-curt(Y,P,T,Z,GRI))
 825                              ;
 826   
 827  qresendomax(Y,P,T,C,R,GRI)..
 828                      q_endo(Y,P,T,C,R,GRI)
 829                      =l=
 830                              R_ENDO(C,GRI,R)*sum(Z $ C_Z(C,Z), (RES_T(P,T,Z,GRI)-REL_T(P,T,Z,GRI))*cap(Y,Z,GRI))
 831                              ;
 832   
 833   
 834  qres(Y,P,T,C,R)..
 835                      sum(Z $ C_Z(C,Z),       sum(G, res_g(Y,P,T,Z,R,G)))
 836                      + sum(Z $ C_Z(C,Z), sum(S, res_s(Y,P,T,Z,R,S)))
 837                      + sum(Z $ C_Z(C,Z), res_DR(Y,P,T,Z,R))
 838                      =e=
 839                              R_EXO(C,R)
 840                              + sum(GRI, q_endo(Y,P,T,C,R,GRI))
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                07/24/16 17:01:18 Page 18
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 841                              ;
 842   
 843  #--Dispatchable capacity--#
 844   
 845  #TODO: wich demand is needed here?
 846  qgendisp(Y,P,T,C)..
 847                      sum(Z $ C_Z(C,Z), sum(GD, gen(Y,P,T,Z,GD)))
 848                      =g=
 849                              sum(Z $ C_Z(C,Z), demand_unit(P,T,Z))*0.20
 850                              ;
 851   
 852  qgendisppeak(Y,C)..
 853                      sum(Z $ C_Z(C,Z), sum(GD, cap(Y,Z,GD)))
 854                      =g=
 855                              10000*1.20
 856                              ;
 857   
 858  #--Emissions--#
 859   
 860  qco2(Y,C,G)..
 861                      co2(Y,C,G)
 862                      =e=
 863                              sum(Z $ C_Z(C,Z), sum((P,T), W(P)*gen(Y,P,T,Z,G)*G_DATA(G,'CO2')))
 864                              ;
 865   
 866  qlcg(Y,C,G)..
 867                      lcg(Y,C,G)
 868                      =e=
 869                              sum(Z $ C_Z(C,Z), sum((P,T), gen(Y,P,T,Z,G)*G_DATA(G,'LCG')))
 870                              ;
 871   
 872   
 873  #-----###########################----------------------------------------------#
 874  #-----# Generation technologies #----------------------------------------------#
 875  #-----###########################----------------------------------------------#
 876   
 877  ##--Installed generation capacities--#
 878   
 879  qpotcapmin(Y,C,G)..
 880                      sum(Z $ C_Z(C,Z), cap(Y,Z,G))
 881                      =g=
 882                              G_DATA(G,'CAP_MIN')
 883                              ;
 884   
 885  #qpotcapmax(Y,C,G)..
 886  #                                       sum(Z $ C_Z(C,Z), cap(Y,Z,G))
 887  #                                       =g=
 888  #                                               CAP_G(Y,Z,G,'CAP_MAX')
 889  #                                               ;
 890  #
 891  #qpotgenmin(Y,C,G)..
 892  #                                       sum(Z $ C_Z(C,Z), sum(T, gen(Y,T,Z,G)))
 893  #                                       =g=
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                07/24/16 17:01:18 Page 19
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 894  #                                               CAP_G(Y,Z,G,'GEN_MIN')
 895  #                                               ;
 896  #
 897  #qpotgenmax(Y,Z,G)..
 898  #                                       sum(Z $ C_Z(C,Z), sum(T, gen(Y,T,Z,G)))
 899  #                                       =g=
 900  #                                               CAP_G(Y,Z,G,'GEN_MAX')
 901  #                                               ;
 902   
 903  #-------Dispatchable generation technologies-----------------------------------#
 904   
 905  #--Reserve allocation--#
 906   
 907  qresgcu(Y,P,T,Z,RU,GD)..
 908                      res_g(Y,P,T,Z,RU,GD)
 909                      =e=
 910                              res_g_s(Y,P,T,Z,RU,GD)
 911                              + res_g_ns(Y,P,T,Z,RU,GD)
 912                              ;
 913   
 914  qresgcd(Y,P,T,Z,RD,GD)..
 915                      res_g(Y,P,T,Z,RD,GD)
 916                      =e=
 917                              res_g_s(Y,P,T,Z,RD,GD)
 918                              + res_g_sd(Y,P,T,Z,RD,GD)
 919                              ;
 920   
 921  #--Clustering logical constraints--#
 922   
 923  qn(Y,P,T,Z,GD)$(ord(T)<card(T))..
 924                      n(Y,P,T+1,Z,GD)
 925                      =e=
 926                              n(Y,P,T,Z,GD)
 927                              + n_su(Y,P,T,Z,GD)
 928                              - n_sd(Y,P,T,Z,GD)
 929                              ;
 930   
 931  qnmax(Y,P,T,Z,GD)..
 932                      n(Y,P,T,Z,GD)
 933                      =l=
 934                              cap(Y,Z,GD)/G_DATA(GD,'P_MAX')
 935                              ;
 936   
 937  qnsu(Y,P,T,Z,GD)..
 938                      n_su(Y,P,T,Z,GD)
 939                      + sum(RU, n_su_r(Y,P,T,Z,RU,GD))
 940                      =l=
 941                              cap(Y,Z,GD)/G_DATA(GD,'P_MAX')
 942                              - n(Y,P,T,Z,GD)
 943                              - sum(MDT(GD,T_MDT), n_sd(Y,P, T-(ord(T_MDT)-1), Z, GD))
 944                              ;
 945   
 946  qnsd(Y,P,T,Z,GD)..
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                07/24/16 17:01:18 Page 20
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


 947                      n_sd(Y,P,T,Z,GD)
 948                      + sum(RD, n_sd_r(Y,P,T,Z,RD,GD))
 949                      =l=
 950                              n(Y,P,T,Z,GD)
 951                              - sum(MUT(GD,T_MUT), n_su(Y,P, T-(ord(T_MUT)-1), Z, GD))
 952                              ;
 953   
 954  #--Generation constraints--#
 955   
 956  qgen(Y,P,T,Z,GD)$(ord(T)<card(T))..
 957                      gen(Y,P,T+1,Z,GD)
 958                      =e=
 959                          gen(Y,P,T,Z,GD)
 960                          + ramp_up(Y,P,T,Z,GD)
 961                          - ramp_dn(Y,P,T,Z,GD)
 962                          + ramp_su(Y,P,T,Z,GD)
 963                          - ramp_sd(Y,P,T,Z,GD)
 964                          ;
 965   
 966  qgenmin(Y,P,T,Z,GD)..
 967                      gen(Y,P,T,Z,GD)
 968                      =g=
 969                              n(Y,P,T,Z,GD)*G_DATA(GD,'P_MIN')
 970                              ;
 971   
 972  qgenmax(Y,P,T,Z,GD)..
 973                      gen(Y,P,T,Z,GD)
 974                      =l=
 975                              n(Y,P,T,Z,GD)*G_DATA(GD,'P_MAX')
 976                              ;
 977                              #*G_DATA(G,'PM')/100;
 978   
 979  #--Ramping constraints--#
 980   
 981  qrudyn(Y,P,T,Z,GD)..
 982                      ramp_up(Y,P,T,Z,GD)
 983                      + sum(RU, res_g_s(Y,P,T,Z,RU,GD))
 984                      =l=
 985                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD))*G_DATA(GD,'RH')/100*G_DATA(GD,'P_MAX')
 986                          ;
 987   
 988  qrucap(Y,P,T,Z,GD)..
 989                      ramp_up(Y,P,T,Z,GD)
 990                      + sum(RU, res_g_s(Y,P,T,Z,RU,GD))
 991                      =l=
 992                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD))*G_DATA(GD,'P_MAX')
 993                          - (gen(Y,P,T,Z,GD)-ramp_sd(Y,P,T,Z,GD))
 994                          ;
 995   
 996  qrddyn(Y,P,T,Z,GD)..
 997                      ramp_dn(Y,P,T,Z,GD)
 998                      + sum(RD, res_g_s(Y,P,T,Z,RD,GD))
 999                      =l=
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                07/24/16 17:01:18 Page 21
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1000                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD)-sum(RD, n_sd_r(Y,P,T,Z,RD,GD)))*G_DATA(GD,'RH')/100*G_DATA(GD,'P_MAX')
1001                          ;
1002   
1003  qrdcap(Y,P,T,Z,GD)..
1004                      ramp_dn(Y,P,T,Z,GD)
1005                      + sum(RD, res_g_s(Y,P,T,Z,RD,GD))
1006                      =l=
1007                          (gen(Y,P,T,Z,GD)-ramp_sd(Y,P,T,Z,GD)-sum(RD, res_g_sd(Y,P,T,Z,RD,GD)))
1008                          - (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD)-sum(RD, n_sd_r(Y,P,T,Z,RD,GD)))*G_DATA(GD,'P_MIN')
1009                          ;
1010   
1011  qsumin(Y,P,T,Z,GD)..
1012                      ramp_su(Y,P,T,Z,GD)
1013                      =g=
1014                              n_su(Y,P,T,Z,GD)*G_DATA(GD,'P_MIN')
1015                              ;
1016   
1017  qsumax(Y,P,T,Z,GD)..
1018                      ramp_su(Y,P,T,Z,GD)
1019                      =l=
1020                              n_su(Y,P,T,Z,GD)*G_DATA(GD,'RH')/100*G_DATA(GD,'P_MAX')
1021                              ;
1022   
1023  qsdmin(Y,P,T,Z,GD)..
1024                      ramp_sd(Y,P,T,Z,GD)
1025                      =g=
1026                              n_sd(Y,P,T,Z,GD)*G_DATA(GD,'P_MIN')
1027                              ;
1028   
1029  qsdmax(Y,P,T,Z,GD)..
1030                      ramp_sd(Y,P,T,Z,GD)
1031                      =l=
1032                              n_sd(Y,P,T,Z,GD)*G_DATA(GD,'RH')/100*G_DATA(GD,'P_MAX')
1033                              ;
1034   
1035  #--Reserve allocation constraints--#
1036   
1037  qrufu(Y,P,T,Z,GD)..
1038                      sum(RUF, res_g_s(Y,P,T,Z,RUF,GD))
1039                      =l=
1040                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD))*G_DATA(GD,'RF')/100*G_DATA(GD,'P_MAX')
1041                          ;
1042   
1043  qruau(Y,P,T,Z,GD)..
1044                      sum(RUA, res_g_s(Y,P,T,Z,RUA,GD))
1045                      =l=
1046                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD))*G_DATA(GD,'RA')/100*G_DATA(GD,'P_MAX')
1047                          ;
1048   
1049  qrumus(Y,P,T,Z,GD)..
1050                      sum(RU, res_g_s(Y,P,T,Z,RU,GD))
1051                      =l=
1052                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD))*G_DATA(GD,'RM')/100*G_DATA(GD,'P_MAX')
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                07/24/16 17:01:18 Page 22
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1053                          ;
1054   
1055  qrdad(Y,P,T,Z,GD)..
1056                      sum(RDA, res_g_s(Y,P,T,Z,RDA,GD))
1057                      =l=
1058                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD)-sum(RD, n_sd_r(Y,P,T,Z,RD,GD)))*G_DATA(GD,'RA')/100*G_DATA(GD,'P_MAX')
1059                          ;
1060   
1061  qrdmd(Y,P,T,Z,GD)..
1062                      sum(RD, res_g_s(Y,P,T,Z,RD,GD))
1063                      =l=
1064                          (n(Y,P,T,Z,GD)-n_sd(Y,P,T,Z,GD)-sum(RD, n_sd_r(Y,P,T,Z,RD,GD)))*G_DATA(GD,'RM')/100*G_DATA(GD,'P_MAX')
1065                          ;
1066   
1067  qrunsmin(Y,P,T,Z,RU,GD)..
1068                      res_g_ns(Y,P,T,Z,RU,GD)
1069                      =g=
1070                              n_su_r(Y,P,T,Z,RU,GD)*G_DATA(GD,'P_MIN')
1071                              ;
1072   
1073  qrunsmax(Y,P,T,Z,RU,GD)..
1074                      res_g_ns(Y,P,T,Z,RU,GD)
1075                      =l=
1076                              n_su_r(Y,P,T,Z,RU,GD)*RG(RU,GD)/100*G_DATA(GD,'P_MAX')
1077                              ;
1078   
1079  qrdsdmin(Y,P,T,Z,RD,GD)..
1080                      res_g_sd(Y,P,T,Z,RD,GD)
1081                      =g=
1082                              n_sd_r(Y,P,T,Z,RD,GD)*G_DATA(GD,'P_MIN')
1083                              ;
1084   
1085  qrdsdmax(Y,P,T,Z,RD,GD)..
1086                      res_g_sd(Y,P,T,Z,RD,GD)
1087                      =l=
1088                              n_sd_r(Y,P,T,Z,RD,GD)*RG(RD,GD)/100*G_DATA(GD,'P_MAX')
1089                              ;
1090   
1091  #-------Intermittent renewable generation technologies-------------------------#
1092   
1093  #--Reserve allocation--#
1094   
1095  qresgru(Y,P,T,Z,RU,GRI)..
1096                      res_g(Y,P,T,Z,RU,GRI)
1097                      =e=
1098                              0
1099                              ;
1100   
1101  #--Output and curtailment constraint--#
1102   
1103  qgenr(Y,P,T,Z,GRI)..
1104                      gen(Y,P,T,Z,GRI)
1105                      + curt(Y,P,T,Z,GRI)
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                07/24/16 17:01:18 Page 23
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1106                      + curt_dummy(Y,P,T,Z,GRI)
1107                      =e=
1108                          cap(Y,Z,GRI)*RES_T(P,T,Z,GRI)
1109                          ;
1110   
1111  #--Reserve allocation constraints--#
1112   
1113  qresgrdr(Y,P,T,Z,GRI)..
1114                      sum(RD, res_g(Y,P,T,Z,RD,GRI))
1115                      =l=
1116                              cap(Y,Z,GRI)*REL_T(P,T,Z,GRI)
1117                              ;
1118   
1119  qresgrdg(Y,P,T,Z,GRI)..
1120                      sum(RD, res_g(Y,P,T,Z,RD,GRI))
1121                      =l=
1122                              gen(Y,P,T,Z,GRI)
1123                              ;
1124   
1125  #-----########################-------------------------------------------------#
1126  #-----# Storage technologies #-------------------------------------------------#
1127  #-----########################-------------------------------------------------#
1128   
1129  #-------General constraints----------------------------------------------------#
1130   
1131  #--Reserve allocation--#
1132   
1133  qress(Y,P,T,Z,R,S)..
1134                      res_s(Y,P,T,Z,R,S)
1135                      =e=
1136                              res_s_c(Y,P,T,Z,R,S)
1137                              + res_s_d(Y,P,T,Z,R,S)
1138                              ;
1139   
1140  #--Installed capacities--#
1141   
1142  qspotcapmin(Y,C,S)..
1143                      sum(Z $ C_Z(C,Z), p_cap_c(Y,Z,S))
1144                      =g=
1145                              S_DATA(S,'CAP_MIN')
1146                              ;
1147   
1148  qspotcapmax(Y,C,S)..
1149                      sum(Z $ C_Z(C,Z), p_cap_c(Y,Z,S))
1150                      =l=
1151                              S_DATA(S,'CAP_MAX')
1152                              ;
1153   
1154  #-------Short- and mid-term storage--------------------------------------------#
1155   
1156  #--Energy constraints--#
1157   
1158  qe(Y,P,Z,SSM)..
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                07/24/16 17:01:18 Page 24
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1159                      e(Y,P++1,Z,SSM)
1160                      =e=
1161                              e(Y,P,Z,SSM)
1162                              + W(P)*sum(T_E, p_c(Y,P,T_E,Z,SSM)*(S_DATA(SSM,'EFF_C')/100) - p_d(Y,P,T_E,Z,SSM)/(S_DATA(SSM,'EFF_D')/100))
1163                              ;
1164   
1165  qemax(Y,P,Z,SSM)..
1166                      e(Y,P,Z,SSM)
1167                      =l=
1168                              e_cap(Y,Z,SSM)
1169                              #p_cap_c(Y,Z,SSM)*S_DATA(SSM,'DUR_MIN')
1170                              ;
1171   
1172  qefstart(Y,P,T,Z,SSM)$(ord(T)=1)..
1173                      e_f(Y,P,T,Z,SSM)
1174                      =e=
1175                              e(Y,P,Z,SSM)
1176                              ;
1177   
1178  qef(Y,P,T,Z,SSM)$(ord(T)<card(T))..
1179                      e_f(Y,P,T+1,Z,SSM)
1180                      =e=
1181                              e_f(Y,P,T,Z,SSM)
1182                              + p_c(Y,P,T,Z,SSM)*(S_DATA(SSM,'EFF_C')/100)
1183                              - p_d(Y,P,T,Z,SSM)/(S_DATA(SSM,'EFF_D')/100)
1184                              ;
1185   
1186  qefmin(Y,P,T,Z,SSM)..
1187                      e_f(Y,P,T,Z,SSM)
1188                      =g=
1189                              1/(S_DATA(SSM,'EFF_D')/100)*
1190                              (p_d(Y,P,T,Z,SSM)*T_MARKET
1191                              + sum(RU, res_s_d(Y,P,T,Z,RU,SSM)*T_R(RU)))
1192                              ;
1193  qefmax(Y,P,T,Z,SSM)..
1194                      e_f(Y,P,T,Z,SSM)
1195                      =l=
1196                              e_cap(Y,Z,SSM) - (S_DATA(SSM,'EFF_C')/100)*
1197                              #p_cap_c(Y,Z,SSM)*S_DATA(SSM,'DUR_MIN') - (S_DATA(SSM,'EFF_C')/100)*
1198                              (p_c(Y,P,T,Z,SSM)*T_MARKET
1199                              + sum(RD, res_s_c(Y,P,T,Z,RD,SSM)*T_R(RD)))
1200                              ;
1201   
1202  qelstart(Y,P,T,Z,SSM)$(ord(T)=1)..
1203                      e_l(Y,P,T,Z,SSM)
1204                      =e=
1205                              e(Y,P,Z,SSM)
1206                              + (W(P)-1)*sum(T_E, p_c(Y,P,T_E,Z,SSM)*(S_DATA(SSM,'EFF_C')/100) - p_d(Y,P,T_E,Z,SSM)/(S_DATA(SSM,'EFF_D')/100))
1207                              ;
1208   
1209  qel(Y,P,T,Z,SSM)$(ord(T)<card(T))..
1210                      e_l(Y,P,T+1,Z,SSM)
1211                      =e=
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                07/24/16 17:01:18 Page 25
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1212                              e_l(Y,P,T,Z,SSM)
1213                              + p_c(Y,P,T,Z,SSM)*(S_DATA(SSM,'EFF_C')/100)
1214                              - p_d(Y,P,T,Z,SSM)/(S_DATA(SSM,'EFF_D')/100)
1215                              ;
1216   
1217  qelmin(Y,P,T,Z,SSM)..
1218                      e_l(Y,P,T,Z,SSM)
1219                      =g=
1220                              1/(S_DATA(SSM,'EFF_D')/100)*
1221                              (p_d(Y,P,T,Z,SSM)*T_MARKET
1222                              + sum(RU, res_s_d(Y,P,T,Z,RU,SSM)*T_R(RU)))
1223                              ;
1224  qelmax(Y,P,T,Z,SSM)..
1225                      e_l(Y,P,T,Z,SSM)
1226                      =l=
1227                              e_cap(Y,Z,SSM) - (S_DATA(SSM,'EFF_C')/100)*
1228                              #p_cap_c(Y,Z,SSM)*S_DATA(SSM,'DUR_MIN') - (S_DATA(SSM,'EFF_C')/100)*
1229                              (p_c(Y,P,T,Z,SSM)*T_MARKET
1230                              + sum(RD, res_s_c(Y,P,T,Z,RD,SSM)*T_R(RD)))
1231                              ;
1232   
1233  #--Duration limits--#
1234   
1235  qdurmin(Y,Z,SSM)..
1236                      e_cap(Y,Z,SSM)
1237                      #p_cap_c(Y,Z,SSM)*S_DATA(SSM,'DUR_MIN')
1238                      =g=
1239                              p_cap_c(Y,Z,SSM)*S_DATA(SSM,'DUR_MIN')
1240                              ;
1241   
1242  qdurmax(Y,Z,SSM)..
1243                      e_cap(Y,Z,SSM)
1244                      #p_cap_c(Y,Z,SSM)*S_DATA(SSM,'DUR_MIN')
1245                      =l=
1246                              p_cap_c(Y,Z,SSM)*S_DATA(SSM,'DUR_MAX')
1247                              ;
1248   
1249  #--Cycling cost--#
1250   
1251  qsscemin(Y,Z,SS)..
1252                      cyc_cost(Y,Z,SS)
1253                      =g=
1254                          0
1255                          ;
1256   
1257  qssccmin(Y,Z,SS)..
1258                      cyc_cost(Y,Z,SS)
1259                      =g=
1260                          (S_DATA(SS,'C_E_CYCL') - S_DATA(SS,'C_E_INV'))*1000*e_cap(Y,Z,SS)
1261                              + sum((P,T),
1262                                  W(P)*(S_DATA(SS,'OPEX'))*
1263                                  p_c(Y,P,T,Z,SS)
1264                                  *(1/2)*(S_DATA(SS,'EFF_C')/100)
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                07/24/16 17:01:18 Page 26
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1265                                  + W(P)*(S_DATA(SS,'OPEX'))*
1266                                  p_d(Y,P,T,Z,SS)
1267                                  *(1/2)/(S_DATA(SS,'EFF_D')/100)
1268                               )
1269                          ;
1270   
1271  #--Capacity constraint--#
1272   
1273  qsscdmax(Y,P,T,Z,SS)..
1274                      p_c(Y,P,T,Z,SS)
1275                      + sum(RD, res_s_c(Y,P,T,Z,RD,SS))
1276                      + p_d(Y,P,T,Z,SS)
1277                      + sum(RU, res_s_d(Y,P,T,Z,RU,SS))
1278                      =l=
1279                          p_cap_c(Y,Z,SS)
1280                          ;
1281   
1282  #-------Short-term storage-----------------------------------------------------#
1283   
1284  #--Charging constraints--#
1285   
1286  qssc(Y,P,T,Z,SS)$(ord(T)<card(T))..
1287                      p_c(Y,P,T+1,Z,SS)
1288                      =e=
1289                              p_c(Y,P,T,Z,SS)
1290                              + ramp_c_up(Y,P,T,Z,SS)
1291                              - ramp_c_dn(Y,P,T,Z,SS)
1292                              ;
1293   
1294  qsscru(Y,P,T,Z,SS)..
1295                      ramp_c_up(Y,P,T,Z,SS)
1296                      + sum(RD, res_s_c(Y,P,T,Z,RD,SS))
1297                      =l=
1298                          p_cap_c(Y,Z,SS)
1299                          - p_c(Y,P,T,Z,SS)
1300                          ;
1301   
1302  qsscrd(Y,P,T,Z,SS)..
1303                      ramp_c_dn(Y,P,T,Z,SS)
1304                      + sum(RU, res_s_c(Y,P,T,Z,RU,SS))
1305                      =l=
1306                          p_c(Y,P,T,Z,SS)
1307                          ;
1308   
1309  #--Discharging constraints--#
1310   
1311  qssd(Y,P,T,Z,SS)$(ord(T)<card(T))..
1312                      p_d(Y,P,T+1,Z,SS)
1313                      =e=
1314                              p_d(Y,P,T,Z,SS)
1315                              + ramp_d_up(Y,P,T,Z,SS)
1316                      - ramp_d_dn(Y,P,T,Z,SS)
1317                      ;
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                07/24/16 17:01:18 Page 27
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1318   
1319  qssdru(Y,P,T,Z,SS)..
1320                      ramp_d_up(Y,P,T,Z,SS)
1321                      + sum(RU, res_s_d(Y,P,T,Z,RU,SS))
1322                      =l=
1323                          p_cap_c(Y,Z,SS)
1324                          - p_d(Y,P,T,Z,SS)
1325                          ;
1326   
1327  qssdrd(Y,P,T,Z,SS)..
1328                      ramp_d_dn(Y,P,T,Z,SS)
1329                      + sum(RD, res_s_d(Y,P,T,Z,RD,SS))
1330                      =l=
1331                          p_d(Y,P,T,Z,SS)
1332                          ;
1333   
1334  #-------Mid and long-term storage----------------------------------------------#
1335   
1336  #--Reserve allocation--#
1337   
1338  qresscu(Y,P,T,Z,RU,SML)..
1339                      res_s_c(Y,P,T,Z,RU,SML)
1340                      =e=
1341                              res_s_c_s(Y,P,T,Z,RU,SML)
1342                              + res_s_c_sd(Y,P,T,Z,RU,SML)
1343                              ;
1344   
1345  qresscd(Y,P,T,Z,RD,SML)..
1346                      res_s_c(Y,P,T,Z,RD,SML)
1347                      =e=
1348                              res_s_c_s(Y,P,T,Z,RD,SML)
1349                              + res_s_c_ns(Y,P,T,Z,RD,SML)
1350                              ;
1351   
1352  qressdu(Y,P,T,Z,RU,SM)..
1353                      res_s_d(Y,P,T,Z,RU,SM)
1354                      =e=
1355                              res_s_d_s(Y,P,T,Z,RU,SM)
1356                              + res_s_d_ns(Y,P,T,Z,RU,SM)
1357                              ;
1358   
1359  qressdd(Y,P,T,Z,RD,SM)..
1360                      res_s_d(Y,P,T,Z,RD,SM)
1361                      =e=
1362                              res_s_d_s(Y,P,T,Z,RD,SM)
1363                              + res_s_d_sd(Y,P,T,Z,RD,SM)
1364                              ;
1365   
1366  #--Charging logical constraints--#
1367   
1368  qnc(Y,P,T,Z,SML)$(ord(T)<card(T))..
1369                      n_c(Y,P,T+1,Z,SML)
1370                      =e=
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                07/24/16 17:01:18 Page 28
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1371                              n_c(Y,P,T,Z,SML)
1372                              + n_c_su(Y,P,T,Z,SML)
1373                              - n_c_sd(Y,P,T,Z,SML)
1374                              ;
1375   
1376  qncmax(Y,P,T,Z,SML)..
1377                      n_c(Y,P,T,Z,SML)
1378                      =l=
1379                              p_cap_c(Y,Z,SML)/S_DATA(SML,'P_C_MAX')
1380                              ;
1381   
1382  qncsu(Y,P,T,Z,SML)..
1383                      n_c_su(Y,P,T,Z,SML)
1384                      + sum(RD, n_c_su_r(Y,P,T,Z,RD,SML))
1385                      =l=
1386                              p_cap_c(Y,Z,SML)/S_DATA(SML,'P_C_MAX')
1387                              - n_c(Y,P,T,Z,SML)
1388                              ;
1389   
1390  qncsd(Y,P,T,Z,SML)..
1391                      n_c_sd(Y,P,T,Z,SML)
1392                      + sum(RU, n_c_sd_r(Y,P,T,Z,RU,SML))
1393                      =l=
1394                              n_c(Y,P,T,Z,SML)
1395                              ;
1396   
1397  #--Charging constraints--#
1398   
1399  qsmlc(Y,P,T,Z,SML)$(ord(T)<card(T))..
1400                      p_c(Y,P,T+1,Z,SML)
1401                      =e=
1402                          p_c(Y,P,T,Z,SML)
1403                          + ramp_c_up(Y,P,T,Z,SML)
1404                          - ramp_c_dn(Y,P,T,Z,SML)
1405                          + ramp_c_su(Y,P,T,Z,SML)
1406                          - ramp_c_sd(Y,P,T,Z,SML)
1407                          ;
1408   
1409  qsmlcmin(Y,P,T,Z,SML)..
1410                      p_c(Y,P,T,Z,SML)
1411                      =g=
1412                              n_c(Y,P,T,Z,SML)*S_DATA(SML,'P_C_MIN')
1413                              ;
1414   
1415  qsmlcmax(Y,P,T,Z,SML)..
1416                      p_c(Y,P,T,Z,SML)
1417                      =l=
1418                              n_c(Y,P,T,Z,SML)*S_DATA(SML,'P_C_MAX')
1419                              ;
1420   
1421  #--Charging ramping constraints--#
1422   
1423  qcrudyn(Y,P,T,Z,SML)..
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                07/24/16 17:01:18 Page 29
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1424                      ramp_c_up(Y,P,T,Z,SML)
1425                      + sum(RD, res_s_c_s(Y,P,T,Z,RD,SML))
1426                      =l=
1427                          (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML))*S_DATA(SML,'RCH')/100*S_DATA(SML,'P_C_MAX')
1428                          ;
1429   
1430  qcrucap(Y,P,T,Z,SML)..
1431                      ramp_c_up(Y,P,T,Z,SML)
1432                      + sum(RD, res_s_c_s(Y,P,T,Z,RD,SML))
1433                      =l=
1434                          (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML))*S_DATA(SML,'P_C_MAX')
1435                          - (p_c(Y,P,T,Z,SML)-ramp_c_sd(Y,P,T,Z,SML))
1436                          ;
1437   
1438  qcrddyn(Y,P,T,Z,SML)..
1439                      ramp_c_dn(Y,P,T,Z,SML)
1440                      + sum(RU, res_s_c_s(Y,P,T,Z,RU,SML))
1441                      =l=
1442                          (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML)-sum(RU, n_c_sd_r(Y,P,T,Z,RU,SML)))*S_DATA(SML,'RCH')/100*S_DATA(SML,'P_C_MAX')
1443                          ;
1444   
1445  qcrdcap(Y,P,T,Z,SML)..
1446                      ramp_c_dn(Y,P,T,Z,SML)
1447                      + sum(RU, res_s_c_s(Y,P,T,Z,RU,SML))
1448                      =l=
1449                          (p_c(Y,P,T,Z,SML)-ramp_c_sd(Y,P,T,Z,SML)-sum(RU, res_s_c_sd(Y,P,T,Z,RU,SML)))
1450                          - (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML)-sum(RU, n_c_sd_r(Y,P,T,Z,RU,SML)))*S_DATA(SML,'P_C_MIN')
1451                          ;
1452   
1453  qcsumin(Y,P,T,Z,SML)..
1454                      ramp_c_su(Y,P,T,Z,SML)
1455                      =g=
1456                              n_c_su(Y,P,T,Z,SML)*S_DATA(SML,'P_C_MIN')
1457                              ;
1458   
1459  qcsumax(Y,P,T,Z,SML)..
1460                      ramp_c_su(Y,P,T,Z,SML)
1461                      =l=
1462                              n_c_su(Y,P,T,Z,SML)*S_DATA(SML,'RCH')/100*S_DATA(SML,'P_C_MAX')
1463                              ;
1464   
1465  qcsdmin(Y,P,T,Z,SML)..
1466                      ramp_c_sd(Y,P,T,Z,SML)
1467                      =g=
1468                              n_c_sd(Y,P,T,Z,SML)*S_DATA(SML,'P_C_MIN')
1469                              ;
1470   
1471  qcsdmax(Y,P,T,Z,SML)..
1472                      ramp_c_sd(Y,P,T,Z,SML)
1473                      =l=
1474                              n_c_sd(Y,P,T,Z,SML)*S_DATA(SML,'RCH')/100*S_DATA(SML,'P_C_MAX')
1475                              ;
1476   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                07/24/16 17:01:18 Page 30
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1477  #--Reserve allocation constraints--#
1478   
1479  qcruad(Y,P,T,Z,SML)..
1480                      sum(RDA, res_s_c_s(Y,P,T,Z,RDA,SML))
1481                      =l=
1482                          (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML))*S_DATA(SML,'RCA')/100*S_DATA(SML,'P_C_MAX')
1483                          ;
1484   
1485  qcrumd(Y,P,T,Z,SML)..
1486                      sum(RD, res_s_c_s(Y,P,T,Z,RD,SML))
1487                      =l=
1488                          (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML))*S_DATA(SML,'RCM')/100*S_DATA(SML,'P_C_MAX')
1489                          ;
1490   
1491  qcrdfu(Y,P,T,Z,SML)..
1492                      sum(RUF, res_s_c_s(Y,P,T,Z,RUF,SML))
1493                      =l=
1494                          (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML)-sum(RU, n_c_sd_r(Y,P,T,Z,RU,SML)))*S_DATA(SML,'RCF')/100*S_DATA(SML,'P_C_MAX')
1495                          ;
1496   
1497  qcrdau(Y,P,T,Z,SML)..
1498                      sum(RUA, res_s_c_s(Y,P,T,Z,RUA,SML))
1499                      =l=
1500                          (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML)-sum(RU, n_c_sd_r(Y,P,T,Z,RU,SML)))*S_DATA(SML,'RCA')/100*S_DATA(SML,'P_C_MAX')
1501                          ;
1502   
1503  qcrdmus(Y,P,T,Z,SML)..
1504                      sum(RU, res_s_c_s(Y,P,T,Z,RU,SML))
1505                      =l=
1506                          (n_c(Y,P,T,Z,SML)-n_c_sd(Y,P,T,Z,SML)-sum(RU, n_c_sd_r(Y,P,T,Z,RU,SML)))*S_DATA(SML,'RCM')/100*S_DATA(SML,'P_C_MAX')
1507                          ;
1508   
1509  qcrunsmin(Y,P,T,Z,RD,SML)..
1510                      res_s_c_ns(Y,P,T,Z,RD,SML)
1511                      =g=
1512                              n_c_su_r(Y,P,T,Z,RD,SML)*S_DATA(SML,'P_C_MIN')
1513                              ;
1514   
1515  qcrunsmax(Y,P,T,Z,RD,SML)..
1516                      res_s_c_ns(Y,P,T,Z,RD,SML)
1517                      =l=
1518                              n_c_su_r(Y,P,T,Z,RD,SML)*RSC(RD,SML)/100*S_DATA(SML,'P_C_MAX')
1519                              ;
1520   
1521  qcrdsdmin(Y,P,T,Z,RU,SML)..
1522                      res_s_c_sd(Y,P,T,Z,RU,SML)
1523                      =g=
1524                              n_c_sd_r(Y,P,T,Z,RU,SML)*S_DATA(SML,'P_C_MIN')
1525                              ;
1526   
1527  qcrdsdmax(Y,P,T,Z,RU,SML)..
1528                      res_s_c_sd(Y,P,T,Z,RU,SML)
1529                      =l=
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                07/24/16 17:01:18 Page 31
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1530                              n_c_sd_r(Y,P,T,Z,RU,SML)*RSC(RU,SML)/100*S_DATA(SML,'P_C_MAX')
1531                              ;
1532   
1533  #-------Mid-term storage-------------------------------------------------------#
1534   
1535  qcapdeqcapc(Y,Z,SM)..
1536                      p_cap_d(Y,Z,SM)
1537                      =e=
1538                              p_cap_c(Y,Z,SM)
1539                              ;
1540   
1541  #--Discharging logical constraints--#
1542   
1543  qnd(Y,P,T,Z,SM)$(ord(T)<card(T))..
1544                      n_d(Y,P,T+1,Z,SM)
1545                      =e=
1546                              n_d(Y,P,T,Z,SM)
1547                              + n_d_su(Y,P,T,Z,SM)
1548                              - n_d_sd(Y,P,T,Z,SM)
1549                              ;
1550   
1551  qndmax(Y,P,T,Z,SM)..
1552                      n_d(Y,P,T,Z,SM)
1553                      =l=
1554                              p_cap_d(Y,Z,SM)/S_DATA(SM,'P_D_MAX')
1555                              ;
1556   
1557  qndsu(Y,P,T,Z,SM)..
1558                      n_d_su(Y,P,T,Z,SM)
1559                      + sum(RU, n_d_su_r(Y,P,T,Z,RU,SM))
1560                      =l=
1561                              p_cap_d(Y,Z,SM)/S_DATA(SM,'P_D_MAX')
1562                              - n_d(Y,P,T,Z,SM)
1563                              ;
1564   
1565  qndsd(Y,P,T,Z,SM)..
1566                      n_d_sd(Y,P,T,Z,SM)
1567                      + sum(RD, n_d_sd_r(Y,P,T,Z,RD,SM))
1568                      =l=
1569                              n_d(Y,P,T,Z,SM)
1570                              ;
1571   
1572  #--Discharging constraints--#
1573   
1574  qsmd(Y,P,T,Z,SM)$(ord(T)<card(T))..
1575                      p_d(Y,P,T+1,Z,SM)
1576                      =e=
1577                          p_d(Y,P,T,Z,SM)
1578                          + ramp_d_up(Y,P,T,Z,SM)
1579                          - ramp_d_dn(Y,P,T,Z,SM)
1580                          + ramp_d_su(Y,P,T,Z,SM)
1581                          - ramp_d_sd(Y,P,T,Z,SM)
1582                          ;
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                07/24/16 17:01:18 Page 32
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1583   
1584  qsmdmin(Y,P,T,Z,SM)..
1585                      p_d(Y,P,T,Z,SM)
1586                      =g=
1587                              n_d(Y,P,T,Z,SM)*S_DATA(SM,'P_D_MIN')
1588                              ;
1589   
1590  qsmdmax(Y,P,T,Z,SM)..
1591                      p_d(Y,P,T,Z,SM)
1592                      =l=
1593                              n_d(Y,P,T,Z,SM)*S_DATA(SM,'P_D_MAX')
1594                              ;
1595   
1596  #--Discharging ramping constraints--#
1597   
1598  qdrudyn(Y,P,T,Z,SM)..
1599                      ramp_d_up(Y,P,T,Z,SM)
1600                      + sum(RU, res_s_d_s(Y,P,T,Z,RU,SM))
1601                      =l=
1602                          (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM))*S_DATA(SM,'RDH')/100*S_DATA(SM,'P_D_MAX')
1603                          ;
1604   
1605  qdrucap(Y,P,T,Z,SM)..
1606                      ramp_d_up(Y,P,T,Z,SM)
1607                      + sum(RU, res_s_d_s(Y,P,T,Z,RU,SM))
1608                      =l=
1609                          (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM))*S_DATA(SM,'P_D_MAX')
1610                          - (p_d(Y,P,T,Z,SM)-ramp_d_sd(Y,P,T,Z,SM))
1611                          ;
1612   
1613  qdrddyn(Y,P,T,Z,SM)..
1614                      ramp_d_dn(Y,P,T,Z,SM)
1615                      + sum(RD, res_s_d_s(Y,P,T,Z,RD,SM))
1616                      =l=
1617                          (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM)-sum(RD, n_d_sd_r(Y,P,T,Z,RD,SM)))*S_DATA(SM,'RDH')/100*S_DATA(SM,'P_D_MAX')
1618                          ;
1619   
1620  qdrdcap(Y,P,T,Z,SM)..
1621                      ramp_d_dn(Y,P,T,Z,SM)
1622                      + sum(RD, res_s_d_s(Y,P,T,Z,RD,SM))
1623                      =l=
1624                          (p_d(Y,P,T,Z,SM)-ramp_d_sd(Y,P,T,Z,SM)-sum(RD, res_s_d_sd(Y,P,T,Z,RD,SM)))
1625                          - (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM)-sum(RD, n_d_sd_r(Y,P,T,Z,RD,SM)))*S_DATA(SM,'P_D_MIN')
1626                          ;
1627   
1628  qdsumin(Y,P,T,Z,SM)..
1629                      ramp_d_su(Y,P,T,Z,SM)
1630                      =g=
1631                              n_d_su(Y,P,T,Z,SM)*S_DATA(SM,'P_D_MIN')
1632                              ;
1633   
1634  qdsumax(Y,P,T,Z,SM)..
1635                      ramp_d_su(Y,P,T,Z,SM)
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                07/24/16 17:01:18 Page 33
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1636                      =l=
1637                              n_d_su(Y,P,T,Z,SM)*S_DATA(SM,'RDH')/100*S_DATA(SM,'P_D_MAX')
1638                              ;
1639   
1640  qdsdmin(Y,P,T,Z,SM)..
1641                      ramp_d_sd(Y,P,T,Z,SM)
1642                      =g=
1643                              n_d_sd(Y,P,T,Z,SM)*S_DATA(SM,'P_D_MIN')
1644                              ;
1645   
1646  qdsdmax(Y,P,T,Z,SM)..
1647                      ramp_d_sd(Y,P,T,Z,SM)
1648                      =l=
1649                              n_d_sd(Y,P,T,Z,SM)*S_DATA(SM,'RDH')/100*S_DATA(SM,'P_D_MAX')
1650                              ;
1651   
1652  #--Reserve allocation constraints--#
1653   
1654  qdrufu(Y,P,T,Z,SM)..
1655                      sum(RUF, res_s_d_s(Y,P,T,Z,RUF,SM))
1656                      =l=
1657                          (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM))*S_DATA(SM,'RDF')/100*S_DATA(SM,'P_D_MAX')
1658                          ;
1659   
1660  qdruau(Y,P,T,Z,SM)..
1661                      sum(RUA, res_s_d_s(Y,P,T,Z,RUA,SM))
1662                      =l=
1663                          (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM))*S_DATA(SM,'RDA')/100*S_DATA(SM,'P_D_MAX')
1664                          ;
1665   
1666  qdrumus(Y,P,T,Z,SM)..
1667                      sum(RU, res_s_d_s(Y,P,T,Z,RU,SM))
1668                      =l=
1669                          (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM))*S_DATA(SM,'RDM')/100*S_DATA(SM,'P_D_MAX')
1670                          ;
1671   
1672  qdrdad(Y,P,T,Z,SM)..
1673                      sum(RDA, res_s_d_s(Y,P,T,Z,RDA,SM))
1674                      =l=
1675                          (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM)-sum(RD, n_d_sd_r(Y,P,T,Z,RD,SM)))*S_DATA(SM,'RDA')/100*S_DATA(SM,'P_D_MAX')
1676                          ;
1677   
1678  qdrdmd(Y,P,T,Z,SM)..
1679                      sum(RD, res_s_d_s(Y,P,T,Z,RD,SM))
1680                      =l=
1681                          (n_d(Y,P,T,Z,SM)-n_d_sd(Y,P,T,Z,SM)-sum(RD, n_d_sd_r(Y,P,T,Z,RD,SM)))*S_DATA(SM,'RDM')/100*S_DATA(SM,'P_D_MAX')
1682                          ;
1683   
1684  qdrunsmin(Y,P,T,Z,RU,SM)..
1685                                          res_s_d_ns(Y,P,T,Z,RU,SM)
1686                                          =g=
1687                                                  n_d_su_r(Y,P,T,Z,RU,SM)*S_DATA(SM,'P_D_MIN')
1688                                                  ;
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                07/24/16 17:01:18 Page 34
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1689   
1690  qdrunsmax(Y,P,T,Z,RU,SM)..
1691                                          res_s_d_ns(Y,P,T,Z,RU,SM)
1692                                          =l=
1693                                                  n_d_su_r(Y,P,T,Z,RU,SM)*RSD(RU,SM)/100*S_DATA(SM,'P_D_MAX')
1694                                                  ;
1695   
1696  qdrdsdmin(Y,P,T,Z,RD,SM)..
1697                                          res_s_d_sd(Y,P,T,Z,RD,SM)
1698                                          =g=
1699                                                  n_d_sd_r(Y,P,T,Z,RD,SM)*S_DATA(SM,'P_D_MIN')
1700                                                  ;
1701   
1702  qdrdsdmax(Y,P,T,Z,RD,SM)..
1703                                          res_s_d_sd(Y,P,T,Z,RD,SM)
1704                                          =l=
1705                                                  n_d_sd_r(Y,P,T,Z,RD,SM)*RSD(RD,SM)/100*S_DATA(SM,'P_D_MAX')
1706                                                  ;
1707   
1708  #-------Long-term storage------------------------------------------------------#
1709   
1710  #--Discharging reserve allocation--#
1711   
1712  qslressd(Y,P,T,Z,R,SL)..
1713                                          res_s_d(Y,P,T,Z,R,SL)
1714                                          =e=
1715                                                  0
1716                                                  ;
1717   
1718  #--Gas energy balance--#
1719   
1720  qgase(Y,P,C)..
1721                                          eg(Y,P++1,C)
1722                                          =e=
1723                                                  eg(Y,P,C)
1724                                                  + W(P)*sum(T_E, pg_c(Y,P,T_E,C) - pg_d(Y,P,T_E,C))
1725                                                  ;
1726   
1727  qgasemax(Y,P,C)..
1728                                          eg(Y,P,C)
1729                                          =l=
1730                                                  E_LP
1731                                                  + eg_cap
1732                                                  ;
1733   
1734  qgasef(Y,P,T,C)$(ord(T)<card(T))..
1735                                          eg_f(Y,P,T+1,C)
1736                                          =e=
1737                                                  eg_f(Y,P,T,C)
1738                                                  + pg_c(Y,P,T,C)
1739                                                  - pg_d(Y,P,T,C)
1740                                                  ;
1741   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                07/24/16 17:01:18 Page 35
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1742  qgasefmax(Y,P,T,C)..
1743                                          eg_f(Y,P,T,C)
1744                                          =l=
1745                                                  E_LP
1746                                                  + eg_cap
1747                                                  ;
1748   
1749  qgasefstart(Y,P,T,C)$(ord(T)=1)..
1750                                          eg_f(Y,P,T,C)
1751                                          =e=
1752                                                  eg(Y,P,C)
1753                                                  ;
1754   
1755  qgasel(Y,P,T,C)$(ord(T)<card(T))..
1756                                          eg_l(Y,P,T+1,C)
1757                                          =e=
1758                                                  eg_l(Y,P,T,C)
1759                                                  + pg_c(Y,P,T,C)
1760                                                  - pg_d(Y,P,T,C)
1761                                                  ;
1762   
1763  qgaselmax(Y,P,T,C)..
1764                                          eg_l(Y,P,T,C)
1765                                          =l=
1766                                                  E_LP
1767                                                  + eg_cap
1768                                                  ;
1769   
1770  qgaselstart(Y,P,T,C)$(ord(T)=1)..
1771                                          eg_l(Y,P,T,C)
1772                                          =e=
1773                                                  eg(Y,P,C)
1774                                                  + (W(P)-1)*sum(T_E, pg_c(Y,P,T_E,C) - pg_d(Y,P,T_E,C))
1775                                                  ;
1776   
1777  #--Gas charging constraints--#
1778   
1779  qgasc(Y,P,T,C)..
1780                                          pg_c(Y,P,T,C)
1781                                          =e=
1782                                                  sum(Z $ C_Z(C,Z), sum(SL, p_c(Y,P,T,Z,SL)*(S_DATA(SL,'EFF_C')/100)))
1783                                                  + pg_import(Y,P,T,C)
1784                                                  ;
1785   
1786  #--Gas discharging constraints--#
1787   
1788  qgasd(Y,P,T,C)..
1789                                          pg_d(Y,P,T,C)
1790                                          =e=
1791                                                  sum(Z $ C_Z(C,Z), sum(GCG, pg_syn(Y,P,T,Z,GCG) + pg_fos(Y,P,T,Z,GCG)))
1792                                                  ;
1793   
1794  #--Gas usage--#
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                07/24/16 17:01:18 Page 36
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1795   
1796  qgasuse(Y,C)..
1797                                          sum(Z $ C_Z(C,Z), sum((GCG,P,T), pg_syn(Y,P,T,Z,GCG)))
1798                                          =l=
1799                                                  sum(Z $ C_Z(C,Z), sum((SL,P,T), p_c(Y,P,T,Z,SL)*(S_DATA(SL,'EFF_C')/100)))
1800                                                  ;
1801   
1802  qgasusegen(Y,P,T,Z,GCG)..
1803                                          gen(Y,P,T,Z,GCG)/(G_DATA(GCG,'EFF')/100)
1804                                          =e=
1805                                                  pg_syn(Y,P,T,Z,GCG)
1806                                                  + pg_fos(Y,P,T,Z,GCG)
1807                                                  ;
1808   
1809  ################################################
1810  # DEMAND RESPONSE
1811  ################################################
1812   
1813  sum_demand(P,T,Z)..
1814                      demand_unit(P,T,Z) =e= DEM_NON_RES(P,T,Z) + demand_new_res(P,T,Z)
1815                      ;
1816   
1817  totdemand(P,Z)..
1818                      demand_tot(P,Z) =e= sum(T,demand_new_res(P,T,Z) + DEM_NON_RES(P,T,Z))
1819                      ;
1820   
1821  refdemand(P,T,Z)..
1822                      demand_ref(P,T,Z) =e= DEM_OPTIMAL(P,T,Z) + DEM_NON_RES(P,T,Z)
1823                      ;
1824   
1825  demand(P,T,Z)..
1826                      demand_new_res(P,T,Z) =e= DEM_OPTIMAL(P,T,Z) + sum(H,ELAST_NEW(P,T,H)*(DEM_OPTIMAL(P,T,Z)/PRICE_REF(P,H,Z))*(price_unit(P,H,Z)-PRICE_REF(P,H,Z)))
1827                      ;
1828   
1829  totdemandmf(P,Z)..
1830                      sum(T,DEM_OPTIMAL(P,T,Z)) =l= sum(T,demand_new_res(P,T,Z))
1831                      ;
1832   
1833  # cost DR
1834   
1835  gdr(P,T,Z)..
1836              genDR(P,T,Z) =g= DEM_RES_FP(P,T,Z)-demand_new_res(P,T,Z)
1837              ;
1838   
1839  gdr2(P,T,Z)..
1840              genDR(P,T,Z) =g= 0
1841              ;
1842   
1843  cdr(P,T,Z)..
1844              capDR(Z) =g= genDR(P,T,Z)
1845              ;
1846   
1847  cgdr(Z)..
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                07/24/16 17:01:18 Page 37
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1848              costgDR(Z) =e= sum((T,P),genDR(P,T,Z)*W(P)*DR_EN_PRICE)
1849              ;
1850   
1851  ccdr(Z)..
1852              costcDR(Z) =e= capDR(Z)*1000*DR_CAP_PRICE
1853              ;
1854   
1855   
1856  # reserve allocation
1857   
1858  qresdrup(Y,P,T,Z)..
1859                      sum(RU,res_DR(Y,P,T,Z,RU)) =l= (demand_new_res(P,T,Z) - DEM_RES_MIN(P,T,Z))*FACTOR_RES_DR
1860                      ;
1861   
1862  qresdrdo(Y,P,T,Z)..
1863                      sum(RD,res_DR(Y,P,T,Z,RD)) =l= (DEM_RES_MAX(P,T,Z) - demand_new_res(P,T,Z))*FACTOR_RES_DR
1864                      ;
1865   
1866  # residential consumption upper and lower limit
1867   
1868  demand_max(P,T,Z)..
1869                      demand_new_res(P,T,Z) =l= DEM_RES_MAX(P,T,Z)
1870                      ;
1871   
1872  demand_min(P,T,Z)..
1873                      demand_new_res(P,T,Z) =g= DEM_RES_MIN(P,T,Z)
1874                      ;
1875   
1876  # auxilliary
1877   
1878  demand_clone(P,H,Z)..
1879                      demand_new_res_clone(P,H,Z) =e= sum(T,demand_new_res(P,T,Z)*DIAG(T,H))
1880                      ;
1881   
1882  price_clone(P,T,Z)..
1883                      price_unit_clone(P,T,Z) =e= sum(H,price_unit(P,H,Z)*DIAG(T,H))
1884                      ;
1885   
1886   
1887  shiftconstraint_frame_1(P,H,Z)..
1888                      sum(T,DEM_OPTIMAL(P,T,Z)*SHIFTMIN(H,T)) =l= sum(T,demand_new_res(P,T,Z)*SHIFTMAX(H,T))
1889                      ;
1890   
1891  shiftconstraint_frame_2(P,H,Z)..
1892                      sum(T,DEM_OPTIMAL(P,T,Z)*SHIFTMAX(H,T)) =g= sum(T,demand_new_res(P,T,Z)*SHIFTMIN(H,T))
1893                      ;
1894   
1895  priceconstraint1(P,H,Z)..
1896                      price_unit(P,H,Z) =l= PRICE_REF(P,H,Z)+PRICE_REF(P,H,Z)*LIMITPRICE
1897                      ;
1898   
1899  priceconstraint2(P,H,Z)..
1900                      price_unit(P,H,Z) =g= PRICE_REF(P,H,Z)-PRICE_REF(P,H,Z)*LIMITPRICE
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                07/24/16 17:01:18 Page 38
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1901                      ;
1902   
1903   
1904   
1905  #shiftedaway(P,H,Z)..
1906  #                    shiftaway(P,H,Z) =e= sum(T,DIAG(T,H)*ELAST_NEW(P,T,H)*DEM_OPTIMAL(P,T,Z)*(price_unit(P,H,Z)-PRICE_REF(P,H,Z))/PRICE_REF(P,H,Z))
1907  #                    ;
1908  #
1909  #shiftedawaytotal(P,Z)..
1910  #                    shiftaway_total(P,Z) =e= sum(H,shift_up(P,H,Z)-shift_down(P,H,Z))
1911  #                    ;
1912  #
1913  #shiftedforward(P,H,Z)..
1914  #                    shiftforwards(P,H,Z) =e= sum(T,TRI_UP(T,H)*ELAST_NEW(P,T,H)*DEM_OPTIMAL(P,T,Z)*(price_unit(P,H,Z)-PRICE_REF(P,H,Z))/PRICE_REF(P,H,Z))
1915  #                    ;
1916  #
1917  #shiftedforwardtotal(P,Z)..
1918  #                    shiftforwards_total(P,Z) =e= sum(H,front_up(P,H,Z)-back_down(P,H,Z))
1919  #                    ;
1920  #
1921  #shiftedbackward(P,H,Z)..
1922  #                    shiftbackwards(P,H,Z) =e= sum(T,TRI_LOW(T,H)*ELAST_NEW(P,T,H)*DEM_OPTIMAL(P,T,Z)*(price_unit(P,H,Z)-PRICE_REF(P,H,Z))/PRICE_REF(P,H,Z))
1923  #                    ;
1924  #
1925  #shiftedbackwardtotal(P,Z)..
1926  #                    shiftbackwards_total(P,Z) =e= sum(H,back_up(P,H,Z)-front_down(P,H,Z))
1927  #                    ;
1928  #
1929  #demlimitunder(P,T,Z)..
1930  #                    DEM_OPTIMAL(P,T,Z) - LIMITDEM =l= demand_new_res(P,T,Z)
1931  #                    ;
1932  #
1933  #demlimitupper(P,T,Z)..
1934  #                    DEM_OPTIMAL(P,T,Z) + LIMITDEM =g= demand_new_res(P,T,Z)
1935  #                    ;
1936   
1937  ####################################
1938  # get downwards en upward numbers for front and back
1939  ####################################
1940   
1941  #front_d_1(P,H,Z)..
1942  #                    front_down(P,H,Z) =l= shiftforwards(P,H,Z)
1943  #                    ;
1944  #
1945  #front_d_2(P,H,Z)..
1946  #                    front_down(P,H,Z) =l= 0
1947  #                    ;
1948  #
1949  #front_u_1(P,H,Z)..
1950  #                    front_up(P,H,Z) =g= shiftforwards(P,H,Z)
1951  #                    ;
1952  #
1953  #front_u_2(P,H,Z)..
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                07/24/16 17:01:18 Page 39
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


1954  #                    front_up(P,H,Z) =g= 0
1955  #                    ;
1956  #
1957  #back_d_1(P,H,Z)..
1958  #                    back_down(P,H,Z) =l= shiftbackwards(P,H,Z)
1959  #                    ;
1960  #
1961  #back_d_2(P,H,Z)..
1962  #                    back_down(P,H,Z) =l= 0
1963  #                    ;
1964  #
1965  #back_u_1(P,H,Z)..
1966  #                    back_up(P,H,Z) =g= shiftbackwards(P,H,Z)
1967  #                    ;
1968  #
1969  #back_u_2(P,H,Z)..
1970  #                    back_up(P,H,Z) =g= 0
1971  #                    ;
1972  #
1973  #shift_d_1(P,H,Z)..
1974  #                    shift_down(P,H,Z) =l= shiftaway(P,H,Z)
1975  #                    ;
1976  #
1977  #shift_d_2(P,H,Z)..
1978  #                    shift_down(P,H,Z) =l= 0
1979  #                    ;
1980  #
1981  #shift_u_1(P,H,Z)..
1982  #                    shift_up(P,H,Z) =g= shiftaway(P,H,Z)
1983  #                    ;
1984  #
1985  #shift_u_2(P,H,Z)..
1986  #                    shift_up(P,H,Z) =g= 0
1987  #                    ;
1988  #
1989  ## things that have to do with compensation matrix
1990  ####################################################
1991  #
1992  #shiftedfi(P,H,Z)..
1993  #                    shiftfi(P,H,Z) =e= sum(T,TRI_UP(T,H)*ELAST(P,T,H)*DEM_OPTIMAL(P,T,Z)*(price_unit(P,H,Z)-PRICE_REF(P,H,Z))/PRICE_REF(P,H,Z))
1994  #                    ;
1995  #
1996  #shiftedbi(P,H,Z)..
1997  #                    shiftbi(P,H,Z) =e= sum(T,TRI_LOW(T,H)*ELAST(P,T,H)*DEM_OPTIMAL(P,T,Z)*(price_unit(P,H,Z)-PRICE_REF(P,H,Z))/PRICE_REF(P,H,Z))
1998  #                    ;
1999  #
2000  #shiftedfc(P,H,Z)..
2001  #                    shiftfc(P,H,Z) =e= sum(T,TRI_UP(T,H)*ELAST_COMP(P,T,H)*DEM_OPTIMAL(P,T,Z)*(price_unit(P,H,Z)-PRICE_REF(P,H,Z))/PRICE_REF(P,H,Z))
2002  #                    ;
2003  #
2004  #shiftedbc(P,H,Z)..
2005  #                    shiftbc(P,H,Z) =e= sum(T,TRI_LOW(T,H)*ELAST_COMP(P,T,H)*DEM_OPTIMAL(P,T,Z)*(price_unit(P,H,Z)-PRICE_REF(P,H,Z))/PRICE_REF(P,H,Z))
2006  #                    ;
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                07/24/16 17:01:18 Page 40
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


2007   
2008   
2009  MODEL GOA GOA model /
2010   
2011  #-------Objective function-----------------------------------------------------#
2012                  qobj
2013   
2014  #-------System constraints-----------------------------------------------------#
2015                  qbalance
2016   
2017                  qresprod
2018                  qco2lim
2019   
2020                  qresendomin
2021                  qresendomax
2022                  qres
2023   
2024                  #qgendisp
2025                  #qgendisppeak
2026   
2027                  qco2
2028                  qlcg
2029   
2030  #-------Generation technologies------------------------------------------------#
2031                  qpotcapmin
2032  #               qpotcapmax
2033  #               qpotgenmin
2034  #               qpotgenmax
2035   
2036  #--Conventional generation technologies--#
2037                  qresgcu
2038                  qresgcd
2039   
2040                  qn
2041                  qnmax
2042                  qnsu
2043                  qnsd
2044   
2045                  qgen
2046                  qgenmin
2047                  qgenmax
2048   
2049                  qrudyn
2050                  qrucap
2051                  qrddyn
2052                  qrdcap
2053                  qsumin
2054                  qsumax
2055                  qsdmin
2056                  qsdmax
2057   
2058                  qrufu
2059                  qruau
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                07/24/16 17:01:18 Page 41
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


2060                  qrumus
2061                  qrdad
2062                  qrdmd
2063                  qrunsmin
2064                  qrunsmax
2065                  qrdsdmin
2066                  qrdsdmax
2067   
2068  #--Intermittent renewable generation technologies--#
2069                  qresgru
2070   
2071                  qgenr
2072   
2073                  qresgrdr
2074                  qresgrdg
2075   
2076  #-------Storage technologies---------------------------------------------------#
2077  #--General constraints--#
2078                  qress
2079                  qspotcapmin
2080                  qspotcapmax
2081   
2082                  qe
2083                  qemax
2084                  qef
2085                  qefmin
2086                  qefmax
2087                  qefstart
2088                  qel
2089                  qelmin
2090                  qelmax
2091                  qelstart
2092   
2093                  qdurmin
2094                  qdurmax
2095   
2096  #--Short-term storage--#
2097   
2098                  qsscemin
2099                  qssccmin
2100   
2101                  qsscdmax
2102   
2103                  qssc
2104                  qsscru
2105                  qsscrd
2106   
2107                  qssd
2108                  qssdru
2109                  qssdrd
2110   
2111  #--Mid and long-term storage--#
2112                  qresscu
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                07/24/16 17:01:18 Page 42
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


2113                  qresscd
2114                  qressdu
2115                  qressdd
2116   
2117                  qnc
2118                  qncmax
2119                  qncsu
2120                  qncsd
2121   
2122                  qsmlc
2123                  qsmlcmin
2124                  qsmlcmax
2125   
2126                  qcrudyn
2127                  qcrucap
2128                  qcrddyn
2129                  qcrdcap
2130                  qcsumin
2131                  qcsumax
2132                  qcsdmin
2133                  qcsdmax
2134   
2135                  qcruad
2136                  qcrumd
2137                  qcrdfu
2138                  qcrdau
2139                  qcrdmus
2140                  qcrunsmin
2141                  qcrunsmax
2142                  qcrdsdmin
2143                  qcrdsdmax
2144   
2145  #--Mid-term storage--#
2146                  qcapdeqcapc
2147   
2148                  qnd
2149                  qndmax
2150                  qndsu
2151                  qndsd
2152   
2153                  qsmd
2154                  qsmdmin
2155                  qsmdmax
2156   
2157                  qdrudyn
2158                  qdrucap
2159                  qdrddyn
2160                  qdrdcap
2161                  qdsumin
2162                  qdsumax
2163                  qdsdmin
2164                  qdsdmax
2165   
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                07/24/16 17:01:18 Page 43
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


2166                  qdrufu
2167                  qdruau
2168                  qdrumus
2169                  qdrdad
2170                  qdrdmd
2171                  qdrunsmin
2172                  qdrunsmax
2173                  qdrdsdmin
2174                  qdrdsdmax
2175   
2176  #--Long-term storage--#
2177                  qslressd
2178   
2179                  qgase
2180                  qgasemax
2181                  qgasef
2182                  qgasefmax
2183                  qgasefstart
2184                  qgasel
2185                  qgaselmax
2186                  qgaselstart
2187   
2188                  qgasc
2189   
2190                  qgasd
2191   
2192                  qgasuse
2193                  qgasusegen
2194   
2195  #-- Price-elasticity--#
2196   
2197          totdemand
2198          refdemand
2199          sum_demand
2200   
2201          demand
2202          price_clone
2203  #       demand_clone
2204   
2205          #reserve allocation of flex demand
2206          qresdrup
2207          qresdrdo
2208   
2209          #limits demand difference
2210  #       demlimitunder
2211  #       demlimitupper
2212   
2213          #keeps demand between boundaries
2214          demand_max
2215          demand_min
2216   
2217          # add cost for DR
2218          gdr
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                07/24/16 17:01:18 Page 44
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


2219          gdr2
2220          cdr
2221          cgdr
2222          ccdr
2223   
2224         # limit price deviation from reference
2225         priceconstraint1
2226         priceconstraint2
2227   
2228         ##########
2229         # include when working with moving frames
2230  #       shiftconstraint_frame_1
2231  #       shiftconstraint_frame_2
2232  #       totdemandmf
2233   
2234   
2235         #####
2236         # include when analysing demand shift hour per hour
2237   
2238  #      shiftedaway
2239  #      shiftedforward
2240  #      shiftedbackward
2241   
2242  #      shiftedawaytotal
2243  #      shiftedforwardtotal
2244  #      shiftedbackwardtotal
2245   
2246  #       front_d_1
2247  #       front_d_2
2248  #       front_u_1
2249  #       front_u_2
2250  #
2251  #       back_d_1
2252  #       back_d_2
2253  #       back_u_1
2254  #       back_u_2
2255  #
2256  #       shift_u_1
2257  #       shift_u_2
2258  #       shift_d_1
2259  #       shift_d_2
2260  #
2261  #        shiftedbc
2262  #        shiftedfc
2263  #        shiftedbi
2264  #        shiftedfi
2265   
2266  /;
2267   
2268   
2269   

**** LIST OF STRAY NAMES - CHECK DECLARATIONS FOR SPURIOUS COMMAS
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                07/24/16 17:01:18 Page 45
GOA version 2.0 (December 2013) puuh
C o m p i l a t i o n


**** STRAY NAME taking OF TYPE PARAM
**** STRAY NAME based OF TYPE VAR  
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                07/24/16 17:01:18 Page 46
GOA version 2.0 (December 2013) puuh
Include File Summary


   SEQ   GLOBAL TYPE      PARENT   LOCAL  FILENAME

     1        1 INPUT          0       0  C:\Users\Wout\Documents\School\2e master\2e semester\Thesis\Model2 - Usefull Code\run\../gams/LinearModel_Wout_comp.gms
     2        8 INCLUDE        1       8  .C:\Users\Wout\Documents\School\2e master\2e semester\Thesis\Model2 - Usefull Code\run\../gams/GAMS.opt
     3      173 INCLUDE        1       9  .C:\Users\Wout\Documents\School\2e master\2e semester\Thesis\Model2 - Usefull Code\run\../gams/GOA.opt
     4      265 GDXIN          1      69  C:\Users\Wout\Documents\School\2e master\2e semester\Thesis\Model2 - Usefull Code\run\_gams_py_gdb0.gdx


COMPILATION TIME     =        0.000 SECONDS      3 MB  24.5.1 r54187 WEX-WEI
GAMS 24.5.1  r54187 Released Sep 23, 2015 WEX-WEI x86 64bit/MS Windows                                                                                                                                                                07/24/16 17:01:18 Page 47
GOA version 2.0 (December 2013) puuh
E x e c u t i o n


EXECUTION TIME       =        0.015 SECONDS      4 MB  24.5.1 r54187 WEX-WEI


USER: Electrical Engineering, Research Group         S150824:1037AO-GEN
      Katholieke Universiteit Leuven                             DC6075
      License for teaching and research at degree granting institutions


**** FILE SUMMARY

Input      C:\Users\Wout\Documents\School\2e master\2e semester\Thesis\Model2 - Usefull Code\run\../gams/LinearModel_Wout_comp.gms
Output     C:\Users\Wout\Documents\School\2e master\2e semester\Thesis\Model2 - Usefull Code\run\../gams/LinearModel_Wout_comp.lst
Save       C:\Users\Wout\Documents\School\2e master\2e semester\Thesis\Model2 - Usefull Code\run\_gams_py_gcp0.g0?

**** WARNING - COMPILER OPTIONS ARE NON DEFAULT   
     EOLCOM # 
